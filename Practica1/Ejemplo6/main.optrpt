Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -I. -O2 -qopt-report=3 -c -o main.o

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] main.c(28,33)
  -> EXTERN: (34,3) printf(const char *__restrict__, ...)
  -> EXTERN: (35,3) exit(int)
  -> EXTERN: (38,12) readImage(const char *, int *, int *)
  -> EXTERN: (39,28) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (41,2) printf(const char *__restrict__, ...)
  -> EXTERN: (42,2) printf(const char *__restrict__, ...)
  -> EXTERN: (43,2) printf(const char *__restrict__, ...)
  -> EXTERN: (43,87) fflush(FILE *)
  -> INLINE: (48,21) get_time_sec()
    -> EXTERN: (18,2) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (49,3) ApplyStencil(unsigned char *, unsigned char *, int, int)
  -> INLINE: (50,21) get_time_sec()
    -> EXTERN: (18,2) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (67,3) printf(const char *__restrict__, ...)
  -> EXTERN: (69,3) fflush(FILE *)
  -> EXTERN: (72,3) CopyImage(unsigned char *, unsigned char *, int, int)
  -> EXTERN: (76,2) writeImage(const char *, unsigned char *, int, int)
  -> EXTERN: (78,2) _mm_free(void *)
  -> EXTERN: (79,2) _mm_free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at main.c(47,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:gettimeofday(struct timeval *__restrict__, __timezone_ptr_t (18:2) and call:CopyImage(unsigned char *, unsigned char *, int, int) (72:3)
LOOP END

    Report from: Code generation optimizations [cg]

main.c(28,33):remark #34051: REGISTER ALLOCATION : [main] main.c:28

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rsi rdi r8 r12-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     126
            Global    :      27
            Local     :      99
        Regenerable   :      43
        Spilled       :       5
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :      14 [1.91e+01 ~ 9.5%]
            Writes    :       2 [2.00e+00 ~ 1.0%]
        Spills        :      24 bytes*
            Reads     :       3 [3.80e+00 ~ 1.9%]
            Writes    :       3 [3.80e+00 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: get_time_sec()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (get_time_sec()) [2] main.c(14,22)
  -> EXTERN: (18,2) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)


    Report from: Code generation optimizations [cg]

main.c(14,22):remark #34051: REGISTER ALLOCATION : [get_time_sec] main.c:14

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rsi rdi zmm0]
        
    Routine temporaries
        Total         :      14
            Global    :       6
            Local     :       8
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
