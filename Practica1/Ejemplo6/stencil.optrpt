Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -I. -O2 -qopt-report=3 -c -o stencil.o

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: ApplyStencil(unsigned char *, unsigned char *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ApplyStencil(unsigned char *, unsigned char *, int, int)) [1] stencil.c(4,89)
  -> EXTERN: (25,16) _mm256_subs_epu8(union __m256i, union __m256i)
  -> EXTERN: (26,16) _mm256_adds_epu8(union __m256i, union __m256i)
  -> EXTERN: (27,16) _mm256_subs_epu8(union __m256i, union __m256i)
  -> EXTERN: (28,16) _mm256_adds_epu8(union __m256i, union __m256i)
  -> EXTERN: (29,16) _mm256_subs_epu8(union __m256i, union __m256i)
  -> EXTERN: (30,16) _mm256_adds_epu8(union __m256i, union __m256i)
  -> EXTERN: (31,16) _mm256_subs_epu8(union __m256i, union __m256i)
  -> EXTERN: (32,16) _mm256_adds_epu8(union __m256i, union __m256i)
  -> EXTERN: (33,16) _mm256_subs_epu8(union __m256i, union __m256i)
  -> EXTERN: (34,16) _mm256_adds_epu8(union __m256i, union __m256i)
  -> EXTERN: (35,16) _mm256_subs_epu8(union __m256i, union __m256i)
  -> EXTERN: (36,16) _mm256_adds_epu8(union __m256i, union __m256i)
  -> EXTERN: (37,16) _mm256_subs_epu8(union __m256i, union __m256i)
  -> EXTERN: (38,16) _mm256_adds_epu8(union __m256i, union __m256i)
  -> EXTERN: (39,16) _mm256_subs_epu8(union __m256i, union __m256i)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stencil.c(9,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at stencil.c(12,3)
      remark #15310: loop was not vectorized: operation cannot be vectorized   [ stencil.c(19,4) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

stencil.c(4,89):remark #34051: REGISTER ALLOCATION : [ApplyStencil] stencil.c:4

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :      48
            Global    :      21
            Local     :      27
        Regenerable   :       1
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [4.50e+00 ~ 0.7%]
            Writes    :       5 [4.50e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: CopyImage(unsigned char *, unsigned char *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (CopyImage(unsigned char *, unsigned char *, int, int)) [2] stencil.c(45,86)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stencil.c(47,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at stencil.c(48,3)
      remark #25401: memcopy(with guard) generated
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at stencil.c(48,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at stencil.c(48,3)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

stencil.c(48,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
stencil.c(48,3):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stencil.c(48,3):remark #34026: call to memcpy implemented as a call to optimized library version
stencil.c(45,86):remark #34051: REGISTER ALLOCATION : [CopyImage] stencil.c:45

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      41
            Global    :      20
            Local     :      21
        Regenerable   :       1
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      24 [1.84e+01 ~ 5.4%]
            Writes    :       9 [2.70e+00 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
