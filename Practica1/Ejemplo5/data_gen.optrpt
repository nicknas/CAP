Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -I./ -O2 -g -qopt-report=3 -D__DO_FLOAT__ -xAVX -imf-precisionlow -imf-domain-exclusion31 -D_VML_ACCURACY_EP_ -mkl -o black-scholes

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: RandFloat(tfloat, tfloat)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (RandFloat(tfloat, tfloat)) data_gen.c(37,1)

===========================================================================

Begin optimization report for: FreeData(tfloat *, tfloat *, tfloat *, tfloat *, tfloat *, tfloat *, tfloat *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FreeData(tfloat *, tfloat *, tfloat *, tfloat *, tfloat *, tfloat *, tfloat *)) [2] data_gen.c(110,1)
  -> EXTERN: (112,5) _mm_free(void *)
  -> EXTERN: (113,5) _mm_free(void *)
  -> EXTERN: (114,5) _mm_free(void *)
  -> EXTERN: (115,5) _mm_free(void *)
  -> EXTERN: (116,5) _mm_free(void *)
  -> EXTERN: (117,5) _mm_free(void *)
  -> EXTERN: (118,5) _mm_free(void *)


    Report from: Code generation optimizations [cg]

data_gen.c(110,1):remark #34051: REGISTER ALLOCATION : [FreeData] data_gen.c:110

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rdx rcx rbx rbp rsi rdi r8-r9 r12 r14-r15]
        
    Routine temporaries
        Total         :      26
            Global    :      11
            Local     :      15
        Regenerable   :       2
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: InitData(int, tfloat **, tfloat **, tfloat **, tfloat **, tfloat **, tfloat **, tfloat **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (InitData(int, tfloat **, tfloat **, tfloat **, tfloat **, tfloat **, tfloat **, tfloat **)) [3] data_gen.c(57,1)
  -> EXTERN: (62,32) _mm_malloc(size_t, size_t)
  -> EXTERN: (63,32) _mm_malloc(size_t, size_t)
  -> EXTERN: (64,32) _mm_malloc(size_t, size_t)
  -> EXTERN: (65,32) _mm_malloc(size_t, size_t)
  -> EXTERN: (66,32) _mm_malloc(size_t, size_t)
  -> EXTERN: (67,32) _mm_malloc(size_t, size_t)
  -> EXTERN: (68,32) _mm_malloc(size_t, size_t)
  -> EXTERN: (74,9) printf(const char *__restrict__, ...)
  -> EXTERN: (75,9) exit(int)
  -> EXTERN: (78,5) srand(unsigned int)
  -> INLINE: (85,22) RandFloat(tfloat, tfloat)
    -> EXTERN: (38,12) rand(void)
  -> INLINE: (86,22) RandFloat(tfloat, tfloat)
    -> EXTERN: (38,12) rand(void)
  -> INLINE: (87,22) RandFloat(tfloat, tfloat)
    -> EXTERN: (38,12) rand(void)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at data_gen.c(82,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) (38:12) and call:rand(void) (38:12)
LOOP END

    Report from: Code generation optimizations [cg]

data_gen.c(57,1):remark #34051: REGISTER ALLOCATION : [InitData] data_gen.c:57

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      75
            Global    :      39
            Local     :      36
        Regenerable   :      18
        Spilled       :      14
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :      11 [1.74e+01 ~ 8.2%]
            Writes    :       8 [7.67e+00 ~ 3.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
