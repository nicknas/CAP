Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -I./ -O2 -g -qopt-report=3 -D__DO_FLOAT__ -xAVX -imf-precisionlow -imf-domain-exclusion31 -D_VML_ACCURACY_EP_ -mkl -o black-scholes

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: BlackScholesFormula_MKL(int, tfloat, tfloat, tfloat *, tfloat *, tfloat *, tfloat *, tfloat *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BlackScholesFormula_MKL(int, tfloat, tfloat, tfloat *, tfloat *, tfloat *, tfloat *, tfloat *)) [1] black-scholes_mkl.c(93,1)
  -> EXTERN: (116,9) vmlSetMode(const unsigned int)
  -> EXTERN: (118,9) vsDiv(const int, const float *, const float *, float *)
  -> EXTERN: (119,9) vsLn(const int, const float *, float *)
  -> EXTERN: (129,9) vsInvSqrt(const int, const float *, float *)
  -> EXTERN: (130,9) vsExp(const int, const float *, float *)
  -> EXTERN: (140,9) vsErf(const int, const float *, float *)
  -> EXTERN: (141,9) vsErf(const int, const float *, float *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at black-scholes_mkl.c(121,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between b[j] (123:13) and c[j] (126:13)
LOOP END

LOOP BEGIN at black-scholes_mkl.c(132,9)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at black-scholes_mkl.c(132,9)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 5.270 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at black-scholes_mkl.c(132,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at black-scholes_mkl.c(132,9)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at black-scholes_mkl.c(132,9)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at black-scholes_mkl.c(132,9)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at black-scholes_mkl.c(143,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between a[j] (145:13) and b[j] (148:13)
LOOP END


Non-optimizable loops:


LOOP BEGIN at black-scholes_mkl.c(98,5)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

black-scholes_mkl.c(93,1):remark #34051: REGISTER ALLOCATION : [BlackScholesFormula_MKL] black-scholes_mkl.c:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     194
            Global    :      54
            Local     :     140
        Regenerable   :      28
        Spilled       :      16
        
    Routine stack
        Variables     :   16384 bytes*
            Reads     :      20 [2.15e+02 ~ 9.0%]
            Writes    :      13 [1.48e+02 ~ 6.2%]
        Spills        :     128 bytes*
            Reads     :      16 [5.15e+01 ~ 2.1%]
            Writes    :      16 [1.44e+01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
