Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.4.243 Build 20190416

Compiler options: -Wall -std=c99 -O3 -qopenmp -qopt-report=3 -c -o heat.o

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1] heat.c(93,12)
  -> EXTERN: (96,20) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (97,17) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (99,2) srand(unsigned int)
  -> EXTERN: (100,26) rand(void)
  -> EXTERN: (101,26) rand(void)
  -> EXTERN: (102,2) printf(const char *__restrict__, ...)
  -> INLINE: (104,2) init(unsigned int, unsigned int, float *)
    -> EXTERN: (30,2) memset(void *, int, size_t)
    -> INLINE: (33,9) idx(unsigned int, unsigned int, unsigned int)
    -> INLINE: (37,10) idx(unsigned int, unsigned int, unsigned int)
    -> INLINE: (38,10) idx(unsigned int, unsigned int, unsigned int)
    -> INLINE: (41,10) idx(unsigned int, unsigned int, unsigned int)
    -> INLINE: (42,10) idx(unsigned int, unsigned int, unsigned int)
  -> EXTERN: (105,2) memcpy(void *__restrict__, const void *__restrict__, size_t)
  -> EXTERN: (107,17) omp_get_wtime(void)
  -> INLINE: (113,3) step(unsigned int, unsigned int, const float *, float *)
    -> INLINE: (55,9) idx(unsigned int, unsigned int, unsigned int)
    -> INLINE: (55,34) idx(unsigned int, unsigned int, unsigned int)
    -> INLINE: (56,12) idx(unsigned int, unsigned int, unsigned int)
    -> INLINE: (57,12) idx(unsigned int, unsigned int, unsigned int)
    -> INLINE: (58,12) idx(unsigned int, unsigned int, unsigned int)
  -> INLINE: (114,12) diff(const float *, const float *)
    -> EXTERN: (68,14) fmaxf(float, float)
    -> INLINE: (68,40) idx(unsigned int, unsigned int, unsigned int)
    -> INLINE: (68,64) idx(unsigned int, unsigned int, unsigned int)
  -> EXTERN: (116,4) printf(const char *__restrict__, ...)
  -> EXTERN: (123,16) omp_get_wtime(void)
  -> EXTERN: (124,2) printf(const char *__restrict__, ...)
  -> INLINE: (126,2) write_png(float *, int)
    -> EXTERN: (77,20) malloc(size_t)
    -> EXTERN: (78,17) fmaxf(float, float)
    -> INLINE: (82,21) idx(unsigned int, unsigned int, unsigned int)
    -> INLINE: (83,4) colormap_rgb(colormap, float, float, float, uint8_t *, uint8_t *, uint8_t *)
      -> INLINE: colormap.h:(1114,5) colormap_rgbf(colormap, float, float, float, float *, float *, float *)
        -> INLINE: (1097,21) colormap__clamp(float, float, float)
          -> EXTERN: (1088,12) fmaxf(float, float)
          -> EXTERN: (1088,18) fminf(float, float)
        -> EXTERN: (1101,17) modff(float, float *)
        -> INLINE: (1106,10) colormap__lerp(float, float, float)
        -> INLINE: (1107,10) colormap__lerp(float, float, float)
        -> INLINE: (1108,10) colormap__lerp(float, float, float)
      -> EXTERN: colormap.h:(1115,10) rintf(float)
      -> EXTERN: colormap.h:(1116,10) rintf(float)
      -> EXTERN: colormap.h:(1117,10) rintf(float)
    -> EXTERN: (86,2) sprintf(char *__restrict__, const char *__restrict__, ...)
    -> INLINE: (87,2) stbi_write_png(const char *, int, int, int, const void *, int)
      -> INLINE: stb_image_write.h:(1112,25) stbi_write_png_to_mem(unsigned char *, int, int, int, int, int *)
        -> EXTERN: (1024,17) ?1memcpy
        -> EXTERN: (1025,25) ?1memcpy
        -> EXTERN: (1037,29) malloc(size_t)
        -> EXTERN: (1038,34) malloc(size_t)
        -> EXTERN: (1038,75) free(void *)
        -> (1043,10) stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)
        -> (1047,13) stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)
        -> (1060,13) stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)
        -> EXTERN: (1066,7) memmove(void *, const void *, size_t)
        -> EXTERN: (1068,4) free(void *)
        -> (1069,11) stbi_zlib_compress(unsigned char *, int, int *, int)
        -> EXTERN: (1070,4) free(void *)
        -> EXTERN: (1074,28) malloc(size_t)
        -> EXTERN: (1079,4) memmove(void *, const void *, size_t)
        -> INLINE: (1089,4) stbiw__wpcrc(unsigned char **, int)
          -> INLINE: (975,23) stbiw__crc32(unsigned char *, int)
        -> EXTERN: (1093,4) memmove(void *, const void *, size_t)
        -> EXTERN: (1095,4) free(void *)
        -> INLINE: (1096,4) stbiw__wpcrc(unsigned char **, int)
          -> INLINE: (975,23) stbiw__crc32(unsigned char *, int)
        -> INLINE: (1100,4) stbiw__wpcrc(unsigned char **, int)
          -> INLINE: (975,23) stbiw__crc32(unsigned char *, int)
        -> EXTERN: (1102,4) __assert_fail(const char *, const char *, unsigned int, const char *)
      -> EXTERN: stb_image_write.h:(1118,8) fopen(const char *__restrict__, const char *__restrict__)
      -> EXTERN: stb_image_write.h:(1120,14) free(void *)
      -> EXTERN: stb_image_write.h:(1121,4) fwrite(const void *__restrict__, size_t, size_t, FILE *__restrict__)
      -> EXTERN: stb_image_write.h:(1122,4) fclose(FILE *)
      -> EXTERN: stb_image_write.h:(1123,4) free(void *)
    -> EXTERN: (89,2) free(void *)
  -> EXTERN: (128,2) _mm_free(void *)
  -> EXTERN: (129,2) _mm_free(void *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at heat.c(110,2)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at heat.c(36,2) inlined into heat.c(104,2)
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 4.530 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=31
LOOP END

LOOP BEGIN at heat.c(36,2) inlined into heat.c(104,2)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at heat.c(40,2) inlined into heat.c(104,2)
   remark #15300: LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 6.000 
   remark #15478: estimated potential speedup: 1.160 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=62
LOOP END

LOOP BEGIN at heat.c(40,2) inlined into heat.c(104,2)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at heat.c(80,2) inlined into heat.c(126,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between current[i] (1088:18) and slot (1101:17)

   LOOP BEGIN at heat.c(81,3) inlined into heat.c(126,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between current[i] (1088:18) and slot (1101:17)
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      remark #25015: Estimate of max trip count of loop=250000
   LOOP END
LOOP END

LOOP BEGIN at stb_image_write.h(1039,4) inlined into heat.c(126,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stb_image_write.h(1046,10) inlined into heat.c(126,2)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stb_image_write.h(1051,13) inlined into heat.c(126,2)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=15
      LOOP END

      LOOP BEGIN at stb_image_write.h(1051,13) inlined into heat.c(126,2)
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 2.310 
         remark #15478: estimated potential speedup: 3.260 
         remark #15487: type converts: 1 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=93
      LOOP END

      LOOP BEGIN at stb_image_write.h(1051,13) inlined into heat.c(126,2)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stb_image_write.h(1080,4) inlined into heat.c(126,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.060 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(1081,4) inlined into heat.c(126,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into heat.c(126,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc (965:7) and crc (965:7)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into heat.c(126,2)
<Remainder>
LOOP END

LOOP BEGIN at stb_image_write.h(1092,4) inlined into heat.c(126,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into heat.c(126,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc (965:7) and crc (965:7)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into heat.c(126,2)
<Remainder>
LOOP END

LOOP BEGIN at stb_image_write.h(1098,4) inlined into heat.c(126,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(1099,4) inlined into heat.c(126,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into heat.c(126,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc (965:7) and crc (965:7)
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at heat.c(111,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at heat.c(49,2) inlined into heat.c(113,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at heat.c(51,3) inlined into heat.c(113,3)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at heat.c(51,3) inlined into heat.c(113,3)
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 3 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 26 
         remark #15477: vector cost: 10.750 
         remark #15478: estimated potential speedup: 2.360 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=124
      LOOP END

      LOOP BEGIN at heat.c(51,3) inlined into heat.c(113,3)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=124
      LOOP END

      LOOP BEGIN at heat.c(51,3) inlined into heat.c(113,3)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at heat.c(66,2) inlined into heat.c(114,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between maxdiff (68:14) and maxdiff (68:4)

      LOOP BEGIN at heat.c(67,3) inlined into heat.c(114,12)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between maxdiff (68:14) and maxdiff (68:4)
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

heat.c(30,2):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
heat.c(30,2):remark #34026: call to memset implemented as a call to optimized library version
heat.c(105,2):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
heat.c(105,2):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
heat.c(105,2):remark #34026: call to memcpy implemented as a call to optimized library version
stb_image_write.h(1024,17):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
stb_image_write.h(1025,25):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
stb_image_write.h(1066,7):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1066,7):remark #34014: optimization advice for memmove: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1066,7):remark #34026: call to memmove implemented as a call to optimized library version
stb_image_write.h(1079,4):remark #34026: call to memmove implemented as a call to optimized library version
stb_image_write.h(1093,4):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1093,4):remark #34014: optimization advice for memmove: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1093,4):remark #34026: call to memmove implemented as a call to optimized library version
heat.c(93,12):remark #34051: REGISTER ALLOCATION : [main] heat.c:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :     670
            Global    :     146
            Local     :     524
        Regenerable   :     148
        Spilled       :      32
        
    Routine stack
        Variables     :     192 bytes*
            Reads     :      17 [2.50e+05 ~ 0.7%]
            Writes    :      15 [1.30e+01 ~ 0.0%]
        Spills        :     304 bytes*
            Reads     :      55 [2.00e+06 ~ 5.7%]
            Writes    :      43 [5.02e+05 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbi_zlib_compress(unsigned char *, int, int *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbi_zlib_compress(unsigned char *, int, int *, int)) [2] stb_image_write.h(813,1)
  -> EXTERN: (825,53) malloc(size_t)
  -> INLINE: (830,4) stbiw__sbgrowf(void **, int, int)
    -> EXTERN: (746,14) realloc(void *, size_t)
    -> EXTERN: (747,4) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> INLINE: (831,4) stbiw__sbgrowf(void **, int, int)
    -> EXTERN: (746,14) realloc(void *, size_t)
    -> EXTERN: (747,4) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> (832,4) stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)
  -> (833,4) stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)
  -> INLINE: (841,15) stbiw__zhash(unsigned char *)
  -> INLINE: (847,21) stbiw__zlib_countm(unsigned char *, unsigned char *, int)
  -> EXTERN: (853,10) memmove(void *, const void *, size_t)
  -> INLINE: (856,7) stbiw__sbgrowf(void **, int, int)
    -> EXTERN: (746,14) realloc(void *, size_t)
    -> EXTERN: (747,4) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> INLINE: (860,14) stbiw__zhash(unsigned char *)
  -> INLINE: (865,24) stbiw__zlib_countm(unsigned char *, unsigned char *, int)
  -> EXTERN: (876,10) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> (878,10) stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)
  -> (878,10) stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)
  -> (878,10) stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)
  -> (878,10) stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)
  -> INLINE: (878,10) stbiw__zlib_bitrev(int, int)
  -> INLINE: (878,10) stbiw__zlib_bitrev(int, int)
  -> INLINE: (878,10) stbiw__zlib_bitrev(int, int)
  -> INLINE: (878,10) stbiw__zlib_bitrev(int, int)
  -> (879,27) stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)
  -> (881,10) stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)
  -> INLINE: (881,10) stbiw__zlib_bitrev(int, int)
  -> (882,25) stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)
  -> (885,10) stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)
  -> INLINE: (885,10) stbiw__zlib_bitrev(int, int)
  -> INLINE: (885,10) stbiw__zlib_bitrev(int, int)
  -> (885,10) stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)
  -> INLINE: (891,7) stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)
    -> INLINE: (759,7) stbiw__sbgrowf(void **, int, int)
      -> EXTERN: (746,14) realloc(void *, size_t)
      -> EXTERN: (747,4) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> INLINE: (891,7) stbiw__zlib_bitrev(int, int)
  -> INLINE: (891,7) stbiw__zlib_bitrev(int, int)
  -> (891,7) stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)
  -> (892,4) stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)
  -> INLINE: (892,4) stbiw__zlib_bitrev(int, int)
  -> INLINE: (895,7) stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)
    -> INLINE: (759,7) stbiw__sbgrowf(void **, int, int)
      -> EXTERN: (746,14) realloc(void *, size_t)
      -> EXTERN: (747,4) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> EXTERN: (898,14) free(void *)
  -> EXTERN: (899,4) free(void *)
  -> INLINE: (912,7) stbiw__sbgrowf(void **, int, int)
    -> EXTERN: (746,14) realloc(void *, size_t)
    -> EXTERN: (747,4) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> INLINE: (913,7) stbiw__sbgrowf(void **, int, int)
    -> EXTERN: (746,14) realloc(void *, size_t)
    -> EXTERN: (747,4) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> INLINE: (914,7) stbiw__sbgrowf(void **, int, int)
    -> EXTERN: (746,14) realloc(void *, size_t)
    -> EXTERN: (747,4) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> INLINE: (915,7) stbiw__sbgrowf(void **, int, int)
    -> EXTERN: (746,14) realloc(void *, size_t)
    -> EXTERN: (747,4) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> EXTERN: (919,4) memmove(void *, const void *, size_t)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stb_image_write.h(835,4)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at stb_image_write.h(839,4)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at stb_image_write.h(845,7)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ stb_image_write.h(779,4) ]

      LOOP BEGIN at stb_image_write.h(779,4) inlined into stb_image_write.h(848,21)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ stb_image_write.h(779,38) ]
      LOOP END
   LOOP END

   LOOP BEGIN at stb_image_write.h(863,10)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria

      LOOP BEGIN at stb_image_write.h(779,4) inlined into stb_image_write.h(866,24)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ stb_image_write.h(779,38) ]
      LOOP END
   LOOP END

   LOOP BEGIN at stb_image_write.h(877,10)
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at stb_image_write.h(880,10)
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at stb_image_write.h(769,4) inlined into stb_image_write.h(882,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between code (770:7) and code (771:7)
      remark #25436: completely unrolled by 5  
   LOOP END

   LOOP BEGIN at stb_image_write.h(769,4) inlined into stb_image_write.h(879,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between code (770:7) and code (771:7)
      remark #25436: completely unrolled by 8  
   LOOP END

   LOOP BEGIN at stb_image_write.h(769,4) inlined into stb_image_write.h(879,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between code (770:7) and code (771:7)
      remark #25436: completely unrolled by 9  
   LOOP END

   LOOP BEGIN at stb_image_write.h(769,4) inlined into stb_image_write.h(879,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between code (770:7) and code (771:7)
      remark #25436: completely unrolled by 7  
   LOOP END

   LOOP BEGIN at stb_image_write.h(769,4) inlined into stb_image_write.h(879,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between code (770:7) and code (771:7)
      remark #25436: completely unrolled by 8  
   LOOP END

   LOOP BEGIN at stb_image_write.h(769,4) inlined into stb_image_write.h(886,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between code (770:7) and code (771:7)
      remark #25436: completely unrolled by 8  
   LOOP END

   LOOP BEGIN at stb_image_write.h(769,4) inlined into stb_image_write.h(886,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between code (770:7) and code (771:7)
      remark #25436: completely unrolled by 9  
   LOOP END
LOOP END

LOOP BEGIN at stb_image_write.h(890,4)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at stb_image_write.h(758,4) inlined into stb_image_write.h(892,7)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ stb_image_write.h(747,4) ]
   LOOP END

   LOOP BEGIN at stb_image_write.h(769,4) inlined into stb_image_write.h(892,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between code (770:7) and code (771:7)
      remark #25436: completely unrolled by 8  
   LOOP END

   LOOP BEGIN at stb_image_write.h(769,4) inlined into stb_image_write.h(892,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between code (770:7) and code (771:7)
      remark #25436: completely unrolled by 9  
   LOOP END
LOOP END

LOOP BEGIN at stb_image_write.h(894,4)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at stb_image_write.h(758,4) inlined into stb_image_write.h(896,7)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ stb_image_write.h(747,4) ]
   LOOP END
LOOP END

LOOP BEGIN at stb_image_write.h(897,4)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ stb_image_write.h(898,14) ]
LOOP END

LOOP BEGIN at stb_image_write.h(906,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at stb_image_write.h(907,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between s1 (907:39) and s1 (907:39)
      remark #25439: unrolled with remainder by 2  
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      remark #25457: Number of partial sums replaced: 1
   LOOP END

   LOOP BEGIN at stb_image_write.h(907,10)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

stb_image_write.h(835,4):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(835,4):remark #34026: call to memset implemented as a call to optimized library version
stb_image_write.h(853,10):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(853,10):remark #34014: optimization advice for memmove: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(853,10):remark #34026: call to memmove implemented as a call to optimized library version
stb_image_write.h(919,4):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(919,4):remark #34014: optimization advice for memmove: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(919,4):remark #34026: call to memmove implemented as a call to optimized library version
stb_image_write.h(813,1):remark #34051: REGISTER ALLOCATION : [stbi_zlib_compress] stb_image_write.h:813

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     737
            Global    :     145
            Local     :     592
        Regenerable   :     113
        Spilled       :      28
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :      26 [1.80e+01 ~ 0.0%]
            Writes    :      36 [5.09e+01 ~ 0.1%]
        Spills        :     160 bytes*
            Reads     :      43 [6.49e+01 ~ 0.1%]
            Writes    :      43 [5.38e+01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbiw__zlib_flushf(unsigned char *, unsigned int *, int *)) [3] stb_image_write.h(757,1)
  -> INLINE: (759,7) stbiw__sbgrowf(void **, int, int)
    -> EXTERN: (746,14) realloc(void *, size_t)
    -> EXTERN: (747,4) __assert_fail(const char *, const char *, unsigned int, const char *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stb_image_write.h(758,4)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

stb_image_write.h(757,1):remark #34051: REGISTER ALLOCATION : [stbiw__zlib_flushf] stb_image_write.h:757

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      37
            Global    :      15
            Local     :      22
        Regenerable   :       8
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [3.60e+00 ~ 2.6%]
            Writes    :       4 [3.60e+00 ~ 2.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: colormap__clamp(float, float, float)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (colormap__clamp(float, float, float)) colormap.h(1087,61)

===========================================================================

Begin optimization report for: colormap__lerp(float, float, float)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (colormap__lerp(float, float, float)) colormap.h(1091,58)

===========================================================================

Begin optimization report for: colormap_rgb(colormap, float, float, float, uint8_t *, uint8_t *, uint8_t *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (colormap_rgb(colormap, float, float, float, uint8_t *, uint8_t *, uint8_t *)) colormap.h(1112,110)

===========================================================================

Begin optimization report for: colormap_rgbf(colormap, float, float, float, float *, float *, float *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (colormap_rgbf(colormap, float, float, float, float *, float *, float *)) colormap.h(1096,105)

===========================================================================

Begin optimization report for: stbi_flip_vertically_on_write(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbi_flip_vertically_on_write(int)) [8] stb_image_write.h(254,1)


    Report from: Code generation optimizations [cg]

stb_image_write.h(254,1):remark #34051: REGISTER ALLOCATION : [stbi_flip_vertically_on_write] stb_image_write.h:254

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       8
            Global    :       0
            Local     :       8
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbi__start_write_callbacks(stbi__write_context *, stbi_write_func *, void *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbi__start_write_callbacks(stbi__write_context *, stbi_write_func *, void *)) stb_image_write.h(266,1)

===========================================================================

Begin optimization report for: stbi__stdio_write(void *, void *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbi__stdio_write(void *, void *, int)) [10] stb_image_write.h(274,1)
  -> EXTERN: (275,4) fwrite(const void *__restrict__, size_t, size_t, FILE *__restrict__)


    Report from: Code generation optimizations [cg]

stb_image_write.h(274,1):remark #34051: REGISTER ALLOCATION : [stbi__stdio_write] stb_image_write.h:274

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rdx rcx rsi rdi]
        
    Routine temporaries
        Total         :      17
            Global    :       0
            Local     :      17
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbi__start_write_file(stbi__write_context *, const char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbi__start_write_file(stbi__write_context *, const char *)) stb_image_write.h(279,1)

===========================================================================

Begin optimization report for: stbi__end_write_file(stbi__write_context *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbi__end_write_file(stbi__write_context *)) stb_image_write.h(292,1)

===========================================================================

Begin optimization report for: stbiw__writefv(stbi__write_context *, const char *, struct __va_list_tag *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbiw__writefv(stbi__write_context *, const char *, struct __va_list_tag *)) stb_image_write.h(302,1)

===========================================================================

Begin optimization report for: stbiw__putc(stbi__write_context *, unsigned char)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbiw__putc(stbi__write_context *, unsigned char)) stb_image_write.h(339,1)

===========================================================================

Begin optimization report for: stbiw__write3(stbi__write_context *, unsigned char, unsigned char, unsigned char)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbiw__write3(stbi__write_context *, unsigned char, unsigned char, unsigned char)) stb_image_write.h(344,1)

===========================================================================

Begin optimization report for: stbiw__write_pixels(stbi__write_context *, int, int, int, int, int, void *, int, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbiw__write_pixels(stbi__write_context *, int, int, int, int, int, void *, int, int, int)) stb_image_write.h(384,1)

===========================================================================

Begin optimization report for: stbiw__write_pixel(stbi__write_context *, int, int, int, int, unsigned char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbiw__write_pixel(stbi__write_context *, int, int, int, int, unsigned char *)) stb_image_write.h(351,1)

===========================================================================

Begin optimization report for: stbi_write_bmp_core(stbi__write_context *, int, int, int, const void *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbi_write_bmp_core(stbi__write_context *, int, int, int, const void *)) stb_image_write.h(423,1)

===========================================================================

Begin optimization report for: stbiw__outfile(stbi__write_context *, int, int, int, int, int, int, void *, int, int, const char *, ...)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbiw__outfile(stbi__write_context *, int, int, int, int, int, int, void *, int, int, const char *, ...)) [19] stb_image_write.h(409,1)
  -> EXTERN: (414,7) __builtin_stdarg_start
  -> INLINE: (415,7) stbiw__writefv(stbi__write_context *, const char *, struct __va_list_tag *)
    -> EXTERN: (306,40) __builtin_va_arg
    -> INDIRECT-: (307,22)  s_1851_V$4c.0.10.197->func_V$41
    -> EXTERN: (309,30) __builtin_va_arg
    -> INDIRECT-: (313,22)  s_1851_V$4c.0.10.197->func_V$41
    -> EXTERN: (315,39) __builtin_va_arg
    -> INDIRECT-: (321,22)  s_1851_V$4c.0.10.197->func_V$41
    -> EXTERN: (324,13) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> EXTERN: (416,7) __builtin_va_end
  -> INLINE: (417,7) stbiw__write_pixels(stbi__write_context *, int, int, int, int, int, void *, int, int, int)
    -> INLINE: (402,10) stbiw__write_pixel(stbi__write_context *, int, int, int, int, unsigned char *)
      -> INDIRECT-: (356,7)  s_1868_V$6e.0.14.209->func_V$41
      -> INLINE: (362,13) stbiw__write3(stbi__write_context *, unsigned char, unsigned char, unsigned char)
        -> INDIRECT-: (347,4)  s_1867_V$68.0.13.210->func_V$41
      -> INDIRECT-: (364,13)  s_1868_V$6e.0.14.209->func_V$41
      -> INLINE: (371,13) stbiw__write3(stbi__write_context *, unsigned char, unsigned char, unsigned char)
        -> INDIRECT-: (347,4)  s_1867_V$68.0.13.211->func_V$41
      -> INLINE: (376,10) stbiw__write3(stbi__write_context *, unsigned char, unsigned char, unsigned char)
        -> INDIRECT-: (347,4)  s_1867_V$68.0.13.212->func_V$41
      -> INDIRECT-: (380,7)  s_1868_V$6e.0.14.209->func_V$41
    -> INDIRECT-: (404,7)  s_1882_V$78.0.15.171->func_V$41


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stb_image_write.h(303,4) inlined into stb_image_write.h(416,7)
   remark #15523: loop was not vectorized: loop control variable fmt was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at stb_image_write.h(399,4) inlined into stb_image_write.h(418,7)
   remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at stb_image_write.h(400,7) inlined into stb_image_write.h(418,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between bg[0] (352:24) and bg[k] (370:16)

      LOOP BEGIN at stb_image_write.h(369,13) inlined into stb_image_write.h(418,7)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 12 
         remark #15477: vector cost: 47.500 
         remark #15478: estimated potential speedup: 0.270 
         remark #15482: vectorized math library calls: 1 
         remark #15487: type converts: 3 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 3  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

stb_image_write.h(409,1):remark #34051: REGISTER ALLOCATION : [stbiw__outfile] stb_image_write.h:409

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     173
            Global    :      41
            Local     :     132
        Regenerable   :      40
        Spilled       :      24
        
    Routine stack
        Variables     :     220 bytes*
            Reads     :       9 [2.00e+00 ~ 0.2%]
            Writes    :      27 [3.88e+01 ~ 4.3%]
        Spills        :     144 bytes*
            Reads     :      27 [1.29e+02 ~ 14.2%]
            Writes    :      20 [1.11e+02 ~ 12.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbi_write_bmp_to_func(stbi_write_func *, void *, int, int, int, const void *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbi_write_bmp_to_func(stbi_write_func *, void *, int, int, int, const void *)) [20] stb_image_write.h(432,1)
  -> INLINE: (434,4) stbi__start_write_callbacks(stbi__write_context *, stbi_write_func *, void *)
  -> INLINE: (435,11) stbi_write_bmp_core(stbi__write_context *, int, int, int, const void *)
    -> (425,11) stbiw__outfile(stbi__write_context *, int, int, int, int, int, int, void *, int, int, const char *, ...)


    Report from: Code generation optimizations [cg]

stb_image_write.h(432,1):remark #34051: REGISTER ALLOCATION : [stbi_write_bmp_to_func] stb_image_write.h:432

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      37
            Global    :       8
            Local     :      29
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 3.3%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbi_write_bmp(const char *, int, int, int, const void *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbi_write_bmp(const char *, int, int, int, const void *)) [21] stb_image_write.h(440,1)
  -> INLINE: (442,8) stbi__start_write_file(stbi__write_context *, const char *)
    -> EXTERN: (285,8) fopen(const char *__restrict__, const char *__restrict__)
    -> INLINE: (287,4) stbi__start_write_callbacks(stbi__write_context *, stbi_write_func *, void *)
  -> INLINE: (443,15) stbi_write_bmp_core(stbi__write_context *, int, int, int, const void *)
    -> (425,11) stbiw__outfile(stbi__write_context *, int, int, int, int, int, int, void *, int, int, const char *, ...)
  -> INLINE: (444,7) stbi__end_write_file(stbi__write_context *)
    -> EXTERN: (293,4) fclose(FILE *)


    Report from: Code generation optimizations [cg]

stb_image_write.h(440,1):remark #34051: REGISTER ALLOCATION : [stbi_write_bmp] stb_image_write.h:440

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r13]
        
    Routine temporaries
        Total         :      43
            Global    :      14
            Local     :      29
        Regenerable   :      10
        Spilled       :       4
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       1 [2.20e-01 ~ 0.5%]
            Writes    :       2 [4.40e-01 ~ 1.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbi_write_tga_to_func(stbi_write_func *, void *, int, int, int, const void *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbi_write_tga_to_func(stbi_write_func *, void *, int, int, int, const void *)) [22] stb_image_write.h(530,1)
  -> INLINE: (532,4) stbi__start_write_callbacks(stbi__write_context *, stbi_write_func *, void *)
  -> (533,11) stbi_write_tga_core(stbi__write_context *, int, int, int, void *)


    Report from: Code generation optimizations [cg]

stb_image_write.h(530,1):remark #34051: REGISTER ALLOCATION : [stbi_write_tga_to_func] stb_image_write.h:530

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      27
            Global    :       8
            Local     :      19
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 8.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbi_write_tga_core(stbi__write_context *, int, int, int, void *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbi_write_tga_core(stbi__write_context *, int, int, int, void *)) [23] stb_image_write.h(452,1)
  -> (461,14) stbiw__outfile(stbi__write_context *, int, int, int, int, int, int, void *, int, int, const char *, ...)
  -> (467,7) stbiw__writef(stbi__write_context *, const char *, ...)
  -> EXTERN: (489,23) memcmp(const void *, const void *, size_t)
  -> EXTERN: (493,26) memcmp(const void *, const void *, size_t)
  -> EXTERN: (503,27) memcmp(const void *, const void *, size_t)
  -> INDIRECT-: (514,16)  s_1904_V$a9.0.20->func_V$41
  -> INLINE: (516,19) stbiw__write_pixel(stbi__write_context *, int, int, int, int, unsigned char *)
    -> INDIRECT-: (356,7)  s_1868_V$6e.0.14.201->func_V$41
    -> INLINE: (362,13) stbiw__write3(stbi__write_context *, unsigned char, unsigned char, unsigned char)
      -> INDIRECT-: (347,4)  s_1867_V$68.0.13.202->func_V$41
    -> INDIRECT-: (364,13)  s_1868_V$6e.0.14.201->func_V$41
    -> INLINE: (371,13) stbiw__write3(stbi__write_context *, unsigned char, unsigned char, unsigned char)
      -> INDIRECT-: (347,4)  s_1867_V$68.0.13.203->func_V$41
    -> INLINE: (376,10) stbiw__write3(stbi__write_context *, unsigned char, unsigned char, unsigned char)
      -> INDIRECT-: (347,4)  s_1867_V$68.0.13.204->func_V$41
    -> INDIRECT-: (380,7)  s_1868_V$6e.0.14.201->func_V$41
  -> INDIRECT-: (520,16)  s_1904_V$a9.0.20->func_V$41
  -> INLINE: (521,16) stbiw__write_pixel(stbi__write_context *, int, int, int, int, unsigned char *)
    -> INDIRECT-: (356,7)  s_1868_V$6e.0.14.205->func_V$41
    -> INLINE: (362,13) stbiw__write3(stbi__write_context *, unsigned char, unsigned char, unsigned char)
      -> INDIRECT-: (347,4)  s_1867_V$68.0.13.206->func_V$41
    -> INDIRECT-: (364,13)  s_1868_V$6e.0.14.205->func_V$41
    -> INLINE: (371,13) stbiw__write3(stbi__write_context *, unsigned char, unsigned char, unsigned char)
      -> INDIRECT-: (347,4)  s_1867_V$68.0.13.207->func_V$41
    -> INLINE: (376,10) stbiw__write3(stbi__write_context *, unsigned char, unsigned char, unsigned char)
      -> INDIRECT-: (347,4)  s_1867_V$68.0.13.208->func_V$41
    -> INDIRECT-: (380,7)  s_1868_V$6e.0.14.205->func_V$41


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stb_image_write.h(478,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at stb_image_write.h(482,10)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at stb_image_write.h(492,19)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ stb_image_write.h(495,27) ]
      LOOP END

      LOOP BEGIN at stb_image_write.h(502,19)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ stb_image_write.h(504,27) ]
      LOOP END

      LOOP BEGIN at stb_image_write.h(515,16)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between bg[0] (352:24) and bg[k] (370:16)

         LOOP BEGIN at stb_image_write.h(369,13) inlined into stb_image_write.h(517,19)
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15450: unmasked unaligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 12 
            remark #15477: vector cost: 47.500 
            remark #15478: estimated potential speedup: 0.270 
            remark #15482: vectorized math library calls: 1 
            remark #15487: type converts: 3 
            remark #15488: --- end vector cost summary ---
            remark #25436: completely unrolled by 3  
         LOOP END
      LOOP END

      LOOP BEGIN at stb_image_write.h(369,13) inlined into stb_image_write.h(522,16)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 12 
         remark #15477: vector cost: 47.500 
         remark #15478: estimated potential speedup: 0.270 
         remark #15482: vectorized math library calls: 1 
         remark #15487: type converts: 3 
         remark #15488: --- end vector cost summary ---
         remark #25436: completely unrolled by 3  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

stb_image_write.h(489,23):remark #34014: optimization advice for memcmp: increase the first source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(489,23):remark #34014: optimization advice for memcmp: increase the second source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(489,23):remark #34026: call to memcmp implemented as a call to optimized library version
stb_image_write.h(493,26):remark #34014: optimization advice for memcmp: increase the first source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(493,26):remark #34014: optimization advice for memcmp: increase the second source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(493,26):remark #34026: call to memcmp implemented as a call to optimized library version
stb_image_write.h(503,27):remark #34014: optimization advice for memcmp: increase the first source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(503,27):remark #34014: optimization advice for memcmp: increase the second source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(503,27):remark #34026: call to memcmp implemented as a call to optimized library version
stb_image_write.h(452,1):remark #34051: REGISTER ALLOCATION : [stbi_write_tga_core] stb_image_write.h:452

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     248
            Global    :      46
            Local     :     202
        Regenerable   :      42
        Spilled       :      29
        
    Routine stack
        Variables     :      14 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      14 [8.38e+01 ~ 3.9%]
        Spills        :     184 bytes*
            Reads     :      60 [3.13e+02 ~ 14.5%]
            Writes    :      31 [8.54e+01 ~ 4.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbiw__writef(stbi__write_context *, const char *, ...)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbiw__writef(stbi__write_context *, const char *, ...)) [24] stb_image_write.h(331,1)
  -> EXTERN: (333,4) __builtin_stdarg_start
  -> INLINE: (334,4) stbiw__writefv(stbi__write_context *, const char *, struct __va_list_tag *)
    -> EXTERN: (306,40) __builtin_va_arg
    -> INDIRECT-: (307,22)  s_1851_V$4c.0.10.198->func_V$41
    -> EXTERN: (309,30) __builtin_va_arg
    -> INDIRECT-: (313,22)  s_1851_V$4c.0.10.198->func_V$41
    -> EXTERN: (315,39) __builtin_va_arg
    -> INDIRECT-: (321,22)  s_1851_V$4c.0.10.198->func_V$41
    -> EXTERN: (324,13) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> EXTERN: (335,4) __builtin_va_end


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stb_image_write.h(303,4) inlined into stb_image_write.h(335,4)
   remark #15523: loop was not vectorized: loop control variable fmt was found, but loop iteration count cannot be computed before executing the loop
LOOP END

    Report from: Code generation optimizations [cg]

stb_image_write.h(331,1):remark #34051: REGISTER ALLOCATION : [stbiw__writef] stb_image_write.h:331

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r9 r12-r13]
        
    Routine temporaries
        Total         :      60
            Global    :      15
            Local     :      45
        Regenerable   :      18
        Spilled       :       2
        
    Routine stack
        Variables     :     207 bytes*
            Reads     :       9 [3.34e+00 ~ 4.0%]
            Writes    :      17 [9.57e+00 ~ 11.3%]
        Spills        :      16 bytes*
            Reads     :       2 [2.00e+00 ~ 2.4%]
            Writes    :       2 [1.92e+00 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbi_write_tga(const char *, int, int, int, const void *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbi_write_tga(const char *, int, int, int, const void *)) [25] stb_image_write.h(538,1)
  -> INLINE: (540,8) stbi__start_write_file(stbi__write_context *, const char *)
    -> EXTERN: (285,8) fopen(const char *__restrict__, const char *__restrict__)
    -> INLINE: (287,4) stbi__start_write_callbacks(stbi__write_context *, stbi_write_func *, void *)
  -> (541,15) stbi_write_tga_core(stbi__write_context *, int, int, int, void *)
  -> INLINE: (542,7) stbi__end_write_file(stbi__write_context *)
    -> EXTERN: (293,4) fclose(FILE *)


    Report from: Code generation optimizations [cg]

stb_image_write.h(538,1):remark #34051: REGISTER ALLOCATION : [stbi_write_tga] stb_image_write.h:538

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbp rsi rdi r8 r12-r13 r15]
        
    Routine temporaries
        Total         :      33
            Global    :      14
            Local     :      19
        Regenerable   :       5
        Spilled       :       4
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       1 [2.20e-01 ~ 0.6%]
            Writes    :       2 [4.40e-01 ~ 1.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbiw__linear_to_rgbe(unsigned char *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbiw__linear_to_rgbe(unsigned char *, float *)) [26] stb_image_write.h(556,1)
  -> EXTERN: (563,33) frexp(double, int *)


    Report from: Code generation optimizations [cg]

stb_image_write.h(556,1):remark #34051: REGISTER ALLOCATION : [stbiw__linear_to_rgbe] stb_image_write.h:556

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rbp rsi rdi zmm0-zmm3]
        
    Routine temporaries
        Total         :      36
            Global    :      11
            Local     :      25
        Regenerable   :       4
        Spilled       :       3
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       1 [8.43e-01 ~ 1.8%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [8.43e-01 ~ 1.8%]
            Writes    :       1 [8.43e-01 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbiw__write_run_data(stbi__write_context *, int, unsigned char)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbiw__write_run_data(stbi__write_context *, int, unsigned char)) [27] stb_image_write.h(573,1)
  -> EXTERN: (575,4) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> INDIRECT-: (576,4)  s_1946_V$d2.0.24->func_V$41
  -> INDIRECT-: (577,4)  s_1946_V$d2.0.24->func_V$41


    Report from: Code generation optimizations [cg]

stb_image_write.h(573,1):remark #34051: REGISTER ALLOCATION : [stbiw__write_run_data] stb_image_write.h:573

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi r15]
        
    Routine temporaries
        Total         :      30
            Global    :       7
            Local     :      23
        Regenerable   :      13
        Spilled       :       1
        
    Routine stack
        Variables     :       2 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 6.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbi_write_hdr_core(stbi__write_context *, int, int, int, float *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbi_write_hdr_core(stbi__write_context *, int, int, int, float *)) stb_image_write.h(678,1)

===========================================================================

Begin optimization report for: stbiw__write_hdr_scanline(stbi__write_context *, int, int, unsigned char *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbiw__write_hdr_scanline(stbi__write_context *, int, int, unsigned char *, float *)) [29] stb_image_write.h(589,1)
  -> EXTERN: (590,36) ?1memcpy
  -> INLINE: (611,10) stbiw__linear_to_rgbe(unsigned char *, float *)
    -> EXTERN: (563,33) frexp(double, int *)
  -> INDIRECT-: (612,10)  s_1948_V$dd.0.26->func_V$41
  -> INLINE: (628,10) stbiw__linear_to_rgbe(unsigned char *, float *)
    -> EXTERN: (563,33) frexp(double, int *)
  -> INDIRECT-: (635,7)  s_1948_V$dd.0.26->func_V$41
  -> INLINE: (656,16) stbiw__write_dump_data(stbi__write_context *, int, unsigned char *)
    -> EXTERN: (583,4) __assert_fail(const char *, const char *, unsigned int, const char *)
    -> INDIRECT-: (584,4)  s_1947_V$d7.0.25.112->func_V$41
    -> INDIRECT-: (585,4)  s_1947_V$d7.0.25.112->func_V$41
  -> INLINE: (668,19) stbiw__write_run_data(stbi__write_context *, int, unsigned char)
    -> EXTERN: (575,4) __assert_fail(const char *, const char *, unsigned int, const char *)
    -> INDIRECT-: (576,4)  s_1946_V$d2.0.24.115->func_V$41
    -> INDIRECT-: (577,4)  s_1946_V$d2.0.24.115->func_V$41


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stb_image_write.h(600,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between exponent (557:4) and exponent (563:33)
LOOP END

LOOP BEGIN at stb_image_write.h(617,7)
<Predicate Optimized v1>
   remark #25422: Invariant Condition at line 618 hoisted out of this loop
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between scanline[x*ncomp+2] (620:21) and scratch[x+width*3] (632:10)
LOOP END

LOOP BEGIN at stb_image_write.h(617,7)
<Predicate Optimized v2>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between scanline[x*ncomp] (625:45) and scratch[x+width*3] (632:10)
LOOP END

LOOP BEGIN at stb_image_write.h(638,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at stb_image_write.h(642,10)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at stb_image_write.h(645,13)
         remark #15523: loop was not vectorized: loop control variable r was found, but loop iteration count cannot be computed before executing the loop
      LOOP END

      LOOP BEGIN at stb_image_write.h(653,13)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at stb_image_write.h(662,16)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ stb_image_write.h(663,21) ]
      LOOP END

      LOOP BEGIN at stb_image_write.h(665,16)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

stb_image_write.h(590,36):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
stb_image_write.h(589,1):remark #34051: REGISTER ALLOCATION : [stbiw__write_hdr_scanline] stb_image_write.h:589

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     167
            Global    :      66
            Local     :     101
        Regenerable   :      44
        Spilled       :      24
        
    Routine stack
        Variables     :      19 bytes*
            Reads     :       3 [6.32e+00 ~ 0.3%]
            Writes    :      34 [1.06e+02 ~ 5.7%]
        Spills        :     144 bytes*
            Reads     :      28 [5.55e+01 ~ 3.0%]
            Writes    :      26 [3.65e+01 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbi_write_hdr_to_func(stbi_write_func *, void *, int, int, int, const float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbi_write_hdr_to_func(stbi_write_func *, void *, int, int, int, const float *)) [30] stb_image_write.h(704,1)
  -> INLINE: (706,4) stbi__start_write_callbacks(stbi__write_context *, stbi_write_func *, void *)
  -> INLINE: (707,11) stbi_write_hdr_core(stbi__write_context *, int, int, int, float *)
    -> EXTERN: (683,50) malloc(size_t)
    -> INDIRECT-: (687,7)  s_1982_V$ec.0.27.200->func_V$41
    -> EXTERN: (692,13) sprintf(char *__restrict__, const char *__restrict__, ...)
    -> INDIRECT-: (694,7)  s_1982_V$ec.0.27.200->func_V$41
    -> INLINE: (697,10) stbiw__write_hdr_scanline(stbi__write_context *, int, int, unsigned char *, float *)
      -> EXTERN: (590,36) ?1memcpy
      -> INLINE: (611,10) stbiw__linear_to_rgbe(unsigned char *, float *)
        -> EXTERN: (563,33) frexp(double, int *)
      -> INDIRECT-: (612,10)  s_1948_V$dd.0.26.227->func_V$41
      -> INLINE: (628,10) stbiw__linear_to_rgbe(unsigned char *, float *)
        -> EXTERN: (563,33) frexp(double, int *)
      -> INDIRECT-: (635,7)  s_1948_V$dd.0.26.227->func_V$41
      -> INLINE: (656,16) stbiw__write_dump_data(stbi__write_context *, int, unsigned char *)
        -> EXTERN: (583,4) __assert_fail(const char *, const char *, unsigned int, const char *)
        -> INDIRECT-: (584,4)  s_1947_V$d7.0.25.230->func_V$41
        -> INDIRECT-: (585,4)  s_1947_V$d7.0.25.230->func_V$41
      -> INLINE: (668,19) stbiw__write_run_data(stbi__write_context *, int, unsigned char)
        -> EXTERN: (575,4) __assert_fail(const char *, const char *, unsigned int, const char *)
        -> INDIRECT-: (576,4)  s_1946_V$d2.0.24.229->func_V$41
        -> INDIRECT-: (577,4)  s_1946_V$d2.0.24.229->func_V$41
    -> EXTERN: (698,7) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stb_image_write.h(696,7) inlined into stb_image_write.h(708,11)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at stb_image_write.h(600,7) inlined into stb_image_write.h(708,11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between scanline[x*comp+2] (603:21) and rgbe (612:10)
   LOOP END

   LOOP BEGIN at stb_image_write.h(617,7) inlined into stb_image_write.h(708,11)
   <Predicate Optimized v1>
      remark #25422: Invariant Condition at line 618 hoisted out of this loop
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between scanline[x*comp+2] (620:21) and exponent (563:33)
   LOOP END

   LOOP BEGIN at stb_image_write.h(617,7) inlined into stb_image_write.h(708,11)
   <Predicate Optimized v2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between scanline[x*comp] (625:45) and exponent (563:33)
   LOOP END

   LOOP BEGIN at stb_image_write.h(638,7) inlined into stb_image_write.h(708,11)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at stb_image_write.h(642,10) inlined into stb_image_write.h(708,11)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

         LOOP BEGIN at stb_image_write.h(645,13) inlined into stb_image_write.h(708,11)
            remark #15523: loop was not vectorized: loop control variable r was found, but loop iteration count cannot be computed before executing the loop
         LOOP END

         LOOP BEGIN at stb_image_write.h(653,13) inlined into stb_image_write.h(708,11)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END

         LOOP BEGIN at stb_image_write.h(662,16) inlined into stb_image_write.h(708,11)
            remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ stb_image_write.h(663,21) ]
         LOOP END

         LOOP BEGIN at stb_image_write.h(665,16) inlined into stb_image_write.h(708,11)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

stb_image_write.h(590,36):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
stb_image_write.h(704,1):remark #34051: REGISTER ALLOCATION : [stbi_write_hdr_to_func] stb_image_write.h:704

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     214
            Global    :      86
            Local     :     128
        Regenerable   :      61
        Spilled       :      35
        
    Routine stack
        Variables     :     213 bytes*
            Reads     :       3 [2.31e+01 ~ 0.3%]
            Writes    :      41 [3.93e+02 ~ 5.3%]
        Spills        :     232 bytes*
            Reads     :      60 [2.79e+02 ~ 3.8%]
            Writes    :      44 [1.55e+02 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbi_write_hdr(const char *, int, int, int, const float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbi_write_hdr(const char *, int, int, int, const float *)) [31] stb_image_write.h(712,1)
  -> INLINE: (714,8) stbi__start_write_file(stbi__write_context *, const char *)
    -> EXTERN: (285,8) fopen(const char *__restrict__, const char *__restrict__)
    -> INLINE: (287,4) stbi__start_write_callbacks(stbi__write_context *, stbi_write_func *, void *)
  -> INLINE: (715,15) stbi_write_hdr_core(stbi__write_context *, int, int, int, float *)
    -> EXTERN: (683,50) malloc(size_t)
    -> INDIRECT-: (687,7)  s_1982_V$ec.0.27.199->func_V$41
    -> EXTERN: (692,13) sprintf(char *__restrict__, const char *__restrict__, ...)
    -> INDIRECT-: (694,7)  s_1982_V$ec.0.27.199->func_V$41
    -> INLINE: (697,10) stbiw__write_hdr_scanline(stbi__write_context *, int, int, unsigned char *, float *)
      -> EXTERN: (590,36) ?1memcpy
      -> INLINE: (611,10) stbiw__linear_to_rgbe(unsigned char *, float *)
        -> EXTERN: (563,33) frexp(double, int *)
      -> INDIRECT-: (612,10)  s_1948_V$dd.0.26.222->func_V$41
      -> INLINE: (628,10) stbiw__linear_to_rgbe(unsigned char *, float *)
        -> EXTERN: (563,33) frexp(double, int *)
      -> INDIRECT-: (635,7)  s_1948_V$dd.0.26.222->func_V$41
      -> INLINE: (656,16) stbiw__write_dump_data(stbi__write_context *, int, unsigned char *)
        -> EXTERN: (583,4) __assert_fail(const char *, const char *, unsigned int, const char *)
        -> INDIRECT-: (584,4)  s_1947_V$d7.0.25.225->func_V$41
        -> INDIRECT-: (585,4)  s_1947_V$d7.0.25.225->func_V$41
      -> INLINE: (668,19) stbiw__write_run_data(stbi__write_context *, int, unsigned char)
        -> EXTERN: (575,4) __assert_fail(const char *, const char *, unsigned int, const char *)
        -> INDIRECT-: (576,4)  s_1946_V$d2.0.24.224->func_V$41
        -> INDIRECT-: (577,4)  s_1946_V$d2.0.24.224->func_V$41
    -> EXTERN: (698,7) free(void *)
  -> INLINE: (716,7) stbi__end_write_file(stbi__write_context *)
    -> EXTERN: (293,4) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stb_image_write.h(696,7) inlined into stb_image_write.h(716,15)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at stb_image_write.h(600,7) inlined into stb_image_write.h(716,15)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between scanline[x*comp+2] (603:21) and rgbe (612:10)
   LOOP END

   LOOP BEGIN at stb_image_write.h(617,7) inlined into stb_image_write.h(716,15)
   <Predicate Optimized v1>
      remark #25422: Invariant Condition at line 618 hoisted out of this loop
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between scanline[x*comp+2] (620:21) and exponent (563:33)
   LOOP END

   LOOP BEGIN at stb_image_write.h(617,7) inlined into stb_image_write.h(716,15)
   <Predicate Optimized v2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between scanline[x*comp] (625:45) and exponent (563:33)
   LOOP END

   LOOP BEGIN at stb_image_write.h(638,7) inlined into stb_image_write.h(716,15)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at stb_image_write.h(642,10) inlined into stb_image_write.h(716,15)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

         LOOP BEGIN at stb_image_write.h(645,13) inlined into stb_image_write.h(716,15)
            remark #15523: loop was not vectorized: loop control variable r was found, but loop iteration count cannot be computed before executing the loop
         LOOP END

         LOOP BEGIN at stb_image_write.h(653,13) inlined into stb_image_write.h(716,15)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END

         LOOP BEGIN at stb_image_write.h(662,16) inlined into stb_image_write.h(716,15)
            remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ stb_image_write.h(663,21) ]
         LOOP END

         LOOP BEGIN at stb_image_write.h(665,16) inlined into stb_image_write.h(716,15)
            remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

stb_image_write.h(590,36):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
stb_image_write.h(712,1):remark #34051: REGISTER ALLOCATION : [stbi_write_hdr] stb_image_write.h:712

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     219
            Global    :      86
            Local     :     133
        Regenerable   :      64
        Spilled       :      35
        
    Routine stack
        Variables     :     213 bytes*
            Reads     :       3 [5.07e+00 ~ 0.3%]
            Writes    :      41 [8.64e+01 ~ 5.3%]
        Spills        :     232 bytes*
            Reads     :      61 [5.96e+01 ~ 3.7%]
            Writes    :      45 [3.53e+01 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbiw__sbgrowf(void **, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbiw__sbgrowf(void **, int, int)) stb_image_write.h(744,1)

===========================================================================

Begin optimization report for: stbiw__zlib_bitrev(int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbiw__zlib_bitrev(int, int)) stb_image_write.h(767,1)

===========================================================================

Begin optimization report for: stbiw__zlib_countm(unsigned char *, unsigned char *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbiw__zlib_countm(unsigned char *, unsigned char *, int)) stb_image_write.h(777,1)

===========================================================================

Begin optimization report for: stbiw__zhash(unsigned char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbiw__zhash(unsigned char *)) stb_image_write.h(785,1)

===========================================================================

Begin optimization report for: stbiw__crc32(unsigned char *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbiw__crc32(unsigned char *, int)) stb_image_write.h(925,1)

===========================================================================

Begin optimization report for: stbiw__wpcrc(unsigned char **, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbiw__wpcrc(unsigned char **, int)) stb_image_write.h(974,1)

===========================================================================

Begin optimization report for: stbiw__paeth(int, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbiw__paeth(int, int, int)) stb_image_write.h(980,1)

===========================================================================

Begin optimization report for: stbi_write_png_to_mem(unsigned char *, int, int, int, int, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbi_write_png_to_mem(unsigned char *, int, int, int, int, int *)) [39] stb_image_write.h(1022,1)
  -> EXTERN: (1024,17) ?1memcpy
  -> EXTERN: (1025,25) ?1memcpy
  -> EXTERN: (1037,29) malloc(size_t)
  -> EXTERN: (1038,34) malloc(size_t)
  -> EXTERN: (1038,75) free(void *)
  -> (1043,10) stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)
  -> (1047,13) stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)
  -> (1060,13) stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)
  -> EXTERN: (1066,7) memmove(void *, const void *, size_t)
  -> EXTERN: (1068,4) free(void *)
  -> (1069,11) stbi_zlib_compress(unsigned char *, int, int *, int)
  -> EXTERN: (1070,4) free(void *)
  -> EXTERN: (1074,28) malloc(size_t)
  -> EXTERN: (1079,4) memmove(void *, const void *, size_t)
  -> INLINE: (1089,4) stbiw__wpcrc(unsigned char **, int)
    -> INLINE: (975,23) stbiw__crc32(unsigned char *, int)
  -> EXTERN: (1093,4) memmove(void *, const void *, size_t)
  -> EXTERN: (1095,4) free(void *)
  -> INLINE: (1096,4) stbiw__wpcrc(unsigned char **, int)
    -> INLINE: (975,23) stbiw__crc32(unsigned char *, int)
  -> INLINE: (1100,4) stbiw__wpcrc(unsigned char **, int)
    -> INLINE: (975,23) stbiw__crc32(unsigned char *, int)
  -> EXTERN: (1102,4) __assert_fail(const char *, const char *, unsigned int, const char *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stb_image_write.h(1039,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=500

   LOOP BEGIN at stb_image_write.h(1046,10)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stb_image_write.h(1051,13)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=15
      LOOP END

      LOOP BEGIN at stb_image_write.h(1051,13)
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 2.310 
         remark #15478: estimated potential speedup: 2.660 
         remark #15487: type converts: 1 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at stb_image_write.h(1051,13)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stb_image_write.h(1080,4)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.060 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(1081,4)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into stb_image_write.h(1090,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc (965:7) and crc (965:7)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into stb_image_write.h(1090,4)
<Remainder>
LOOP END

LOOP BEGIN at stb_image_write.h(1092,4)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into stb_image_write.h(1097,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc (965:7) and crc (965:7)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into stb_image_write.h(1097,4)
<Remainder>
LOOP END

LOOP BEGIN at stb_image_write.h(1098,4)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(1099,4)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into stb_image_write.h(1101,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc (965:7) and crc (965:7)
   remark #25436: completely unrolled by 4  
LOOP END

    Report from: Code generation optimizations [cg]

stb_image_write.h(1024,17):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
stb_image_write.h(1025,25):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
stb_image_write.h(1066,7):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1066,7):remark #34014: optimization advice for memmove: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1066,7):remark #34026: call to memmove implemented as a call to optimized library version
stb_image_write.h(1079,4):remark #34026: call to memmove implemented as a call to optimized library version
stb_image_write.h(1093,4):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1093,4):remark #34014: optimization advice for memmove: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1093,4):remark #34026: call to memmove implemented as a call to optimized library version
stb_image_write.h(1022,1):remark #34051: REGISTER ALLOCATION : [stbi_write_png_to_mem] stb_image_write.h:1022

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm9]
        
    Routine temporaries
        Total         :     257
            Global    :      64
            Local     :     193
        Regenerable   :      24
        Spilled       :      26
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [2.34e+00 ~ 0.1%]
            Writes    :       3 [3.00e+00 ~ 0.1%]
        Spills        :     160 bytes*
            Reads     :      39 [1.98e+02 ~ 4.2%]
            Writes    :      20 [2.38e+01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)) [40] stb_image_write.h(989,1)
  -> INLINE: (1003,57) stbiw__paeth(int, int, int)
  -> INLINE: (1014,42) stbiw__paeth(int, int, int)
  -> INLINE: (1016,42) stbiw__paeth(int, int, int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at stb_image_write.h(997,4)
   remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ stb_image_write.h(998,7) ]
LOOP END

LOOP BEGIN at stb_image_write.h(1008,4)
   remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ stb_image_write.h(1009,7) ]
LOOP END

    Report from: Code generation optimizations [cg]

stb_image_write.h(989,1):remark #34051: REGISTER ALLOCATION : [stbiw__encode_png_line] stb_image_write.h:989

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     104
            Global    :      34
            Local     :      70
        Regenerable   :       5
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [2.16e+00 ~ 1.3%]
            Writes    :       3 [2.70e+00 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbi_write_png(const char *, int, int, int, const void *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbi_write_png(const char *, int, int, int, const void *, int)) [41] stb_image_write.h(1109,1)
  -> INLINE: (1112,25) stbi_write_png_to_mem(unsigned char *, int, int, int, int, int *)
    -> EXTERN: (1024,17) ?1memcpy
    -> EXTERN: (1025,25) ?1memcpy
    -> EXTERN: (1037,29) malloc(size_t)
    -> EXTERN: (1038,34) malloc(size_t)
    -> EXTERN: (1038,75) free(void *)
    -> (1043,10) stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)
    -> (1047,13) stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)
    -> (1060,13) stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)
    -> EXTERN: (1066,7) memmove(void *, const void *, size_t)
    -> EXTERN: (1068,4) free(void *)
    -> (1069,11) stbi_zlib_compress(unsigned char *, int, int *, int)
    -> EXTERN: (1070,4) free(void *)
    -> EXTERN: (1074,28) malloc(size_t)
    -> EXTERN: (1079,4) memmove(void *, const void *, size_t)
    -> INLINE: (1089,4) stbiw__wpcrc(unsigned char **, int)
      -> INLINE: (975,23) stbiw__crc32(unsigned char *, int)
    -> EXTERN: (1093,4) memmove(void *, const void *, size_t)
    -> EXTERN: (1095,4) free(void *)
    -> INLINE: (1096,4) stbiw__wpcrc(unsigned char **, int)
      -> INLINE: (975,23) stbiw__crc32(unsigned char *, int)
    -> INLINE: (1100,4) stbiw__wpcrc(unsigned char **, int)
      -> INLINE: (975,23) stbiw__crc32(unsigned char *, int)
    -> EXTERN: (1102,4) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> EXTERN: (1118,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (1120,14) free(void *)
  -> EXTERN: (1121,4) fwrite(const void *__restrict__, size_t, size_t, FILE *__restrict__)
  -> EXTERN: (1122,4) fclose(FILE *)
  -> EXTERN: (1123,4) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stb_image_write.h(1039,4) inlined into stb_image_write.h(1113,25)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=500

   LOOP BEGIN at stb_image_write.h(1046,10) inlined into stb_image_write.h(1113,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stb_image_write.h(1051,13) inlined into stb_image_write.h(1113,25)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=15
      LOOP END

      LOOP BEGIN at stb_image_write.h(1051,13) inlined into stb_image_write.h(1113,25)
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 2.310 
         remark #15478: estimated potential speedup: 2.660 
         remark #15487: type converts: 1 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at stb_image_write.h(1051,13) inlined into stb_image_write.h(1113,25)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stb_image_write.h(1080,4) inlined into stb_image_write.h(1113,25)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.060 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(1081,4) inlined into stb_image_write.h(1113,25)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into stb_image_write.h(1113,25)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc (965:7) and crc (965:7)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into stb_image_write.h(1113,25)
<Remainder>
LOOP END

LOOP BEGIN at stb_image_write.h(1092,4) inlined into stb_image_write.h(1113,25)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into stb_image_write.h(1113,25)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc (965:7) and crc (965:7)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into stb_image_write.h(1113,25)
<Remainder>
LOOP END

LOOP BEGIN at stb_image_write.h(1098,4) inlined into stb_image_write.h(1113,25)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(1099,4) inlined into stb_image_write.h(1113,25)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into stb_image_write.h(1113,25)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc (965:7) and crc (965:7)
   remark #25436: completely unrolled by 4  
LOOP END

    Report from: Code generation optimizations [cg]

stb_image_write.h(1024,17):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
stb_image_write.h(1025,25):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
stb_image_write.h(1066,7):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1066,7):remark #34014: optimization advice for memmove: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1066,7):remark #34026: call to memmove implemented as a call to optimized library version
stb_image_write.h(1079,4):remark #34026: call to memmove implemented as a call to optimized library version
stb_image_write.h(1093,4):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1093,4):remark #34014: optimization advice for memmove: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1093,4):remark #34026: call to memmove implemented as a call to optimized library version
stb_image_write.h(1109,1):remark #34051: REGISTER ALLOCATION : [stbi_write_png] stb_image_write.h:1109

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm9]
        
    Routine temporaries
        Total         :     264
            Global    :      67
            Local     :     197
        Regenerable   :      26
        Spilled       :      28
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [2.34e+00 ~ 0.1%]
            Writes    :       3 [3.00e+00 ~ 0.1%]
        Spills        :     176 bytes*
            Reads     :      40 [1.99e+02 ~ 4.3%]
            Writes    :      22 [2.50e+01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbi_write_png_to_func(stbi_write_func *, void *, int, int, int, const void *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbi_write_png_to_func(stbi_write_func *, void *, int, int, int, const void *, int)) [42] stb_image_write.h(1129,1)
  -> INLINE: (1131,25) stbi_write_png_to_mem(unsigned char *, int, int, int, int, int *)
    -> EXTERN: (1024,17) ?1memcpy
    -> EXTERN: (1025,25) ?1memcpy
    -> EXTERN: (1037,29) malloc(size_t)
    -> EXTERN: (1038,34) malloc(size_t)
    -> EXTERN: (1038,75) free(void *)
    -> (1043,10) stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)
    -> (1047,13) stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)
    -> (1060,13) stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)
    -> EXTERN: (1066,7) memmove(void *, const void *, size_t)
    -> EXTERN: (1068,4) free(void *)
    -> (1069,11) stbi_zlib_compress(unsigned char *, int, int *, int)
    -> EXTERN: (1070,4) free(void *)
    -> EXTERN: (1074,28) malloc(size_t)
    -> EXTERN: (1079,4) memmove(void *, const void *, size_t)
    -> INLINE: (1089,4) stbiw__wpcrc(unsigned char **, int)
      -> INLINE: (975,23) stbiw__crc32(unsigned char *, int)
    -> EXTERN: (1093,4) memmove(void *, const void *, size_t)
    -> EXTERN: (1095,4) free(void *)
    -> INLINE: (1096,4) stbiw__wpcrc(unsigned char **, int)
      -> INLINE: (975,23) stbiw__crc32(unsigned char *, int)
    -> INLINE: (1100,4) stbiw__wpcrc(unsigned char **, int)
      -> INLINE: (975,23) stbiw__crc32(unsigned char *, int)
    -> EXTERN: (1102,4) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> INDIRECT-: (1133,4)  func_2106_V$189.0.42
  -> EXTERN: (1134,4) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stb_image_write.h(1039,4) inlined into stb_image_write.h(1132,25)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stb_image_write.h(1046,10) inlined into stb_image_write.h(1132,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stb_image_write.h(1051,13) inlined into stb_image_write.h(1132,25)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=15
      LOOP END

      LOOP BEGIN at stb_image_write.h(1051,13) inlined into stb_image_write.h(1132,25)
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 2.310 
         remark #15478: estimated potential speedup: 2.660 
         remark #15487: type converts: 1 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at stb_image_write.h(1051,13) inlined into stb_image_write.h(1132,25)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stb_image_write.h(1080,4) inlined into stb_image_write.h(1132,25)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.060 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(1081,4) inlined into stb_image_write.h(1132,25)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into stb_image_write.h(1132,25)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc (965:7) and crc (965:7)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into stb_image_write.h(1132,25)
<Remainder>
LOOP END

LOOP BEGIN at stb_image_write.h(1092,4) inlined into stb_image_write.h(1132,25)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into stb_image_write.h(1132,25)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc (965:7) and crc (965:7)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into stb_image_write.h(1132,25)
<Remainder>
LOOP END

LOOP BEGIN at stb_image_write.h(1098,4) inlined into stb_image_write.h(1132,25)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(1099,4) inlined into stb_image_write.h(1132,25)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into stb_image_write.h(1132,25)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc (965:7) and crc (965:7)
   remark #25436: completely unrolled by 4  
LOOP END

    Report from: Code generation optimizations [cg]

stb_image_write.h(1024,17):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
stb_image_write.h(1025,25):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
stb_image_write.h(1066,7):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1066,7):remark #34014: optimization advice for memmove: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1066,7):remark #34026: call to memmove implemented as a call to optimized library version
stb_image_write.h(1079,4):remark #34026: call to memmove implemented as a call to optimized library version
stb_image_write.h(1093,4):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1093,4):remark #34014: optimization advice for memmove: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1093,4):remark #34026: call to memmove implemented as a call to optimized library version
stb_image_write.h(1129,1):remark #34051: REGISTER ALLOCATION : [stbi_write_png_to_func] stb_image_write.h:1129

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm9]
        
    Routine temporaries
        Total         :     259
            Global    :      65
            Local     :     194
        Regenerable   :      23
        Spilled       :      28
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [2.34e+00 ~ 0.1%]
            Writes    :       3 [3.00e+00 ~ 0.1%]
        Spills        :     176 bytes*
            Reads     :      39 [1.98e+02 ~ 4.2%]
            Writes    :      22 [2.53e+01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbiw__jpg_writeBits(stbi__write_context *, int *, int *, const unsigned short *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbiw__jpg_writeBits(stbi__write_context *, int *, int *, const unsigned short *)) stb_image_write.h(1150,112)

===========================================================================

Begin optimization report for: stbiw__jpg_DCT(float *, float *, float *, float *, float *, float *, float *, float *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbiw__jpg_DCT(float *, float *, float *, float *, float *, float *, float *, float *)) stb_image_write.h(1167,124)

===========================================================================

Begin optimization report for: stbiw__jpg_calcBits(int, unsigned short *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (stbiw__jpg_calcBits(int, unsigned short *)) stb_image_write.h(1215,66)

===========================================================================

Begin optimization report for: stbi_write_jpg_to_func(stbi_write_func *, void *, int, int, int, const void *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbi_write_jpg_to_func(stbi_write_func *, void *, int, int, int, const void *, int)) [46] stb_image_write.h(1463,1)
  -> INLINE: (1465,4) stbi__start_write_callbacks(stbi__write_context *, stbi_write_func *, void *)
  -> (1466,11) stbi_write_jpg_core(stbi__write_context *, int, int, int, const void *, int)


    Report from: Code generation optimizations [cg]

stb_image_write.h(1463,1):remark #34051: REGISTER ALLOCATION : [stbi_write_jpg_to_func] stb_image_write.h:1463

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      29
            Global    :       8
            Local     :      21
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 7.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbi_write_jpg_core(stbi__write_context *, int, int, int, const void *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbi_write_jpg_core(stbi__write_context *, int, int, int, const void *, int)) [47] stb_image_write.h(1290,120)
  -> EXTERN: (1392,35) ?1memcpy
  -> INDIRECT-: (1394,7)  s_2142_V$1d6.0.47->func_V$41
  -> INDIRECT-: (1395,7)  s_2142_V$1d6.0.47->func_V$41
  -> INLINE: (1396,7) stbiw__putc(stbi__write_context *, unsigned char)
    -> INDIRECT-: (340,4)  s_1866_V$66.0.12.83->func_V$41
  -> INDIRECT-: (1397,7)  s_2142_V$1d6.0.47->func_V$41
  -> INDIRECT-: (1398,7)  s_2142_V$1d6.0.47->func_V$41
  -> INDIRECT-: (1399,7)  s_2142_V$1d6.0.47->func_V$41
  -> INDIRECT-: (1400,7)  s_2142_V$1d6.0.47->func_V$41
  -> INLINE: (1401,7) stbiw__putc(stbi__write_context *, unsigned char)
    -> INDIRECT-: (340,4)  s_1866_V$66.0.12.82->func_V$41
  -> INDIRECT-: (1402,7)  s_2142_V$1d6.0.47->func_V$41
  -> INDIRECT-: (1403,7)  s_2142_V$1d6.0.47->func_V$41
  -> INLINE: (1404,7) stbiw__putc(stbi__write_context *, unsigned char)
    -> INDIRECT-: (340,4)  s_1866_V$66.0.12.81->func_V$41
  -> INDIRECT-: (1405,7)  s_2142_V$1d6.0.47->func_V$41
  -> INDIRECT-: (1406,7)  s_2142_V$1d6.0.47->func_V$41
  -> INLINE: (1407,7) stbiw__putc(stbi__write_context *, unsigned char)
    -> INDIRECT-: (340,4)  s_1866_V$66.0.12.80->func_V$41
  -> INDIRECT-: (1408,7)  s_2142_V$1d6.0.47->func_V$41
  -> INDIRECT-: (1409,7)  s_2142_V$1d6.0.47->func_V$41
  -> INDIRECT-: (1410,7)  s_2142_V$1d6.0.47->func_V$41
  -> (1445,19) stbiw__jpg_processDU(stbi__write_context *, int *, int *, float *, float *, int, const unsigned short (*)[2], const unsigned short (*)[2])
  -> (1446,19) stbiw__jpg_processDU(stbi__write_context *, int *, int *, float *, float *, int, const unsigned short (*)[2], const unsigned short (*)[2])
  -> (1447,19) stbiw__jpg_processDU(stbi__write_context *, int *, int *, float *, float *, int, const unsigned short (*)[2], const unsigned short (*)[2])
  -> INLINE: (1452,7) stbiw__jpg_writeBits(stbi__write_context *, int *, int *, const unsigned short *)
    -> INLINE: (1156,7) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.139->func_V$41
    -> INLINE: (1158,10) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.140->func_V$41
  -> INLINE: (1456,4) stbiw__putc(stbi__write_context *, unsigned char)
    -> INDIRECT-: (340,4)  s_1866_V$66.0.12.79->func_V$41
  -> INLINE: (1457,4) stbiw__putc(stbi__write_context *, unsigned char)
    -> INDIRECT-: (340,4)  s_1866_V$66.0.12.78->func_V$41


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stb_image_write.h(1374,4)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15463: unmasked indexed (or scatter) stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 62 
   remark #15477: vector cost: 76.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15482: vectorized math library calls: 2 
   remark #15487: type converts: 4 
   remark #15488: --- end vector cost summary ---
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at stb_image_write.h(1381,4)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stb_image_write.h(1382,7)
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15462: unmasked indexed (or gather) loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 77 
      remark #15477: vector cost: 43.750 
      remark #15478: estimated potential speedup: 1.680 
      remark #15486: divides: 2 
      remark #15487: type converts: 4 
      remark #15488: --- end vector cost summary ---
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      remark #25015: Estimate of max trip count of loop=2
   LOOP END
LOOP END

LOOP BEGIN at stb_image_write.h(1422,7)
   remark #25095: Loop Interchange not done due to: User Function Inside Loop Nest
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stb_image_write.h(1423,10)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stb_image_write.h(1425,13)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at stb_image_write.h(1426,16)
         <Predicate Optimized v2>
            remark #25427: Loop Statements Reordered
            remark #25422: Invariant Condition at line 1427 hoisted out of this loop
            remark #25422: Invariant Condition at line 1429 hoisted out of this loop
            remark #15300: LOOP WAS VECTORIZED
            remark #15449: unmasked aligned unit stride stores: 3 
            remark #15462: unmasked indexed (or gather) loads: 3 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 96 
            remark #15477: vector cost: 56.250 
            remark #15478: estimated potential speedup: 1.590 
            remark #15487: type converts: 3 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=2
         LOOP END

         LOOP BEGIN at stb_image_write.h(1426,16)
         <Predicate Optimized v3>
            remark #15300: LOOP WAS VECTORIZED
            remark #15449: unmasked aligned unit stride stores: 3 
            remark #15462: unmasked indexed (or gather) loads: 3 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 86 
            remark #15477: vector cost: 55.000 
            remark #15478: estimated potential speedup: 1.460 
            remark #15487: type converts: 3 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=2
         LOOP END

         LOOP BEGIN at stb_image_write.h(1426,16)
         <Predicate Optimized v3>
            remark #25422: Invariant Condition at line 1429 hoisted out of this loop
            remark #15300: LOOP WAS VECTORIZED
            remark #15449: unmasked aligned unit stride stores: 3 
            remark #15462: unmasked indexed (or gather) loads: 3 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 94 
            remark #15477: vector cost: 55.750 
            remark #15478: estimated potential speedup: 1.560 
            remark #15487: type converts: 3 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=2
         LOOP END

         LOOP BEGIN at stb_image_write.h(1426,16)
         <Predicate Optimized v4>
            remark #15300: LOOP WAS VECTORIZED
            remark #15449: unmasked aligned unit stride stores: 3 
            remark #15462: unmasked indexed (or gather) loads: 3 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 84 
            remark #15477: vector cost: 54.500 
            remark #15478: estimated potential speedup: 1.440 
            remark #15487: type converts: 3 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=2
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stb_image_write.h(1154,4) inlined into stb_image_write.h(1453,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between c (1156:7) and c (340:4)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

    Report from: Code generation optimizations [cg]

stb_image_write.h(1392,35):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
stb_image_write.h(1290,120):remark #34051: REGISTER ALLOCATION : [stbi_write_jpg_core] stb_image_write.h:1290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     862
            Global    :     113
            Local     :     749
        Regenerable   :     115
        Spilled       :      36
        
    Routine stack
        Variables     :    1448 bytes*
            Reads     :      10 [1.31e+02 ~ 0.1%]
            Writes    :      34 [1.95e+03 ~ 2.2%]
        Spills        :     336 bytes*
            Reads     :      66 [3.86e+03 ~ 4.4%]
            Writes    :      42 [3.01e+02 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbiw__jpg_processDU(stbi__write_context *, int *, int *, float *, float *, int, const unsigned short (*)[2], const unsigned short (*)[2])

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbiw__jpg_processDU(stbi__write_context *, int *, int *, float *, float *, int, const unsigned short (*)[2], const unsigned short (*)[2])) [48] stb_image_write.h(1225,187)
  -> INLINE: (1233,7) stbiw__jpg_DCT(float *, float *, float *, float *, float *, float *, float *, float *)
  -> INLINE: (1237,7) stbiw__jpg_DCT(float *, float *, float *, float *, float *, float *, float *, float *)
  -> INLINE: (1250,7) stbiw__jpg_writeBits(stbi__write_context *, int *, int *, const unsigned short *)
    -> INLINE: (1156,7) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.163->func_V$41
    -> INLINE: (1158,10) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.164->func_V$41
  -> INLINE: (1253,7) stbiw__jpg_calcBits(int, unsigned short *)
  -> INLINE: (1254,7) stbiw__jpg_writeBits(stbi__write_context *, int *, int *, const unsigned short *)
    -> INLINE: (1156,7) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.160->func_V$41
    -> INLINE: (1158,10) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.161->func_V$41
  -> INLINE: (1255,7) stbiw__jpg_writeBits(stbi__write_context *, int *, int *, const unsigned short *)
    -> INLINE: (1156,7) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.157->func_V$41
    -> INLINE: (1158,10) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.158->func_V$41
  -> INLINE: (1263,7) stbiw__jpg_writeBits(stbi__write_context *, int *, int *, const unsigned short *)
    -> INLINE: (1156,7) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.154->func_V$41
    -> INLINE: (1158,10) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.155->func_V$41
  -> INLINE: (1277,13) stbiw__jpg_writeBits(stbi__write_context *, int *, int *, const unsigned short *)
    -> INLINE: (1156,7) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.142->func_V$41
    -> INLINE: (1158,10) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.143->func_V$41
  -> INLINE: (1280,7) stbiw__jpg_calcBits(int, unsigned short *)
  -> INLINE: (1281,7) stbiw__jpg_writeBits(stbi__write_context *, int *, int *, const unsigned short *)
    -> INLINE: (1156,7) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.145->func_V$41
    -> INLINE: (1158,10) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.146->func_V$41
  -> INLINE: (1282,7) stbiw__jpg_writeBits(stbi__write_context *, int *, int *, const unsigned short *)
    -> INLINE: (1156,7) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.148->func_V$41
    -> INLINE: (1158,10) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.149->func_V$41
  -> INLINE: (1285,7) stbiw__jpg_writeBits(stbi__write_context *, int *, int *, const unsigned short *)
    -> INLINE: (1156,7) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.151->func_V$41
    -> INLINE: (1158,10) stbiw__putc(stbi__write_context *, unsigned char)
      -> INDIRECT-: (340,4)  s_1866_V$66.0.12.152->func_V$41


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at stb_image_write.h(1232,4)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15452: unmasked strided loads: 8 
   remark #15453: unmasked strided stores: 8 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 168 
   remark #15477: vector cost: 208.500 
   remark #15478: estimated potential speedup: 0.760 
   remark #15487: type converts: 8 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 8  
LOOP END

LOOP BEGIN at stb_image_write.h(1236,4)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 8 
   remark #15451: unmasked unaligned unit stride stores: 8 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 168 
   remark #15477: vector cost: 112.250 
   remark #15478: estimated potential speedup: 1.260 
   remark #15487: type converts: 8 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at stb_image_write.h(1240,4)
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 37 
   remark #15477: vector cost: 18.250 
   remark #15478: estimated potential speedup: 2.010 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=16
LOOP END

LOOP BEGIN at stb_image_write.h(1154,4) inlined into stb_image_write.h(1251,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between c (1156:7) and c (340:4)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at stb_image_write.h(1219,4) inlined into stb_image_write.h(1254,7)
   remark #15523: loop was not vectorized: loop control variable norm_alias_2I16 was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at stb_image_write.h(1154,4) inlined into stb_image_write.h(1255,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between c (1156:7) and c (340:4)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at stb_image_write.h(1154,4) inlined into stb_image_write.h(1256,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between c (1156:7) and c (340:4)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at stb_image_write.h(1259,4)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ stb_image_write.h(1259,43) ]
LOOP END

LOOP BEGIN at stb_image_write.h(1266,4)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at stb_image_write.h(1270,7)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at stb_image_write.h(1276,10)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25452: Original Order found to be proper, but by a close margin
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between c (1156:7) and c (340:4)

      LOOP BEGIN at stb_image_write.h(1154,4) inlined into stb_image_write.h(1278,13)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between c (1156:7) and c (340:4)
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END
   LOOP END

   LOOP BEGIN at stb_image_write.h(1219,4) inlined into stb_image_write.h(1281,7)
      remark #15523: loop was not vectorized: loop control variable norm_alias_2I16 was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at stb_image_write.h(1154,4) inlined into stb_image_write.h(1282,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between c (1156:7) and c (340:4)
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END

   LOOP BEGIN at stb_image_write.h(1154,4) inlined into stb_image_write.h(1283,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between c (1156:7) and c (340:4)
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at stb_image_write.h(1154,4) inlined into stb_image_write.h(1286,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between c (1156:7) and c (340:4)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at stb_image_write.h(1154,4) inlined into stb_image_write.h(1264,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between c (1156:7) and c (340:4)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

    Report from: Code generation optimizations [cg]

stb_image_write.h(1225,187):remark #34051: REGISTER ALLOCATION : [stbiw__jpg_processDU] stb_image_write.h:1225

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     638
            Global    :      83
            Local     :     555
        Regenerable   :      63
        Spilled       :      18
        
    Routine stack
        Variables     :     272 bytes*
            Reads     :       6 [6.71e+00 ~ 0.0%]
            Writes    :      20 [1.49e+03 ~ 5.0%]
        Spills        :      96 bytes*
            Reads     :      33 [8.95e+02 ~ 3.0%]
            Writes    :      31 [6.17e+02 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: stbi_write_jpg(const char *, int, int, int, const void *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbi_write_jpg(const char *, int, int, int, const void *, int)) [49] stb_image_write.h(1472,1)
  -> INLINE: (1474,8) stbi__start_write_file(stbi__write_context *, const char *)
    -> EXTERN: (285,8) fopen(const char *__restrict__, const char *__restrict__)
    -> INLINE: (287,4) stbi__start_write_callbacks(stbi__write_context *, stbi_write_func *, void *)
  -> (1475,15) stbi_write_jpg_core(stbi__write_context *, int, int, int, const void *, int)
  -> INLINE: (1476,7) stbi__end_write_file(stbi__write_context *)
    -> EXTERN: (293,4) fclose(FILE *)


    Report from: Code generation optimizations [cg]

stb_image_write.h(1472,1):remark #34051: REGISTER ALLOCATION : [stbi_write_jpg] stb_image_write.h:1472

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r13 r15]
        
    Routine temporaries
        Total         :      36
            Global    :      15
            Local     :      21
        Regenerable   :       5
        Spilled       :       5
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       1 [2.20e-01 ~ 0.6%]
            Writes    :       2 [4.40e-01 ~ 1.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: idx(unsigned int, unsigned int, unsigned int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (idx(unsigned int, unsigned int, unsigned int)) heat.c(23,78)

===========================================================================

Begin optimization report for: step(unsigned int, unsigned int, const float *, float *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (step(unsigned int, unsigned int, const float *, float *)) heat.c(47,101)

===========================================================================

Begin optimization report for: diff(const float *, const float *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (diff(const float *, const float *)) heat.c(64,62)

===========================================================================

Begin optimization report for: write_png(float *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (write_png(float *, int)) [53] heat.c(75,43)
  -> EXTERN: (77,20) malloc(size_t)
  -> EXTERN: (78,17) fmaxf(float, float)
  -> INLINE: (82,21) idx(unsigned int, unsigned int, unsigned int)
  -> INLINE: (83,4) colormap_rgb(colormap, float, float, float, uint8_t *, uint8_t *, uint8_t *)
    -> INLINE: colormap.h:(1114,5) colormap_rgbf(colormap, float, float, float, float *, float *, float *)
      -> INLINE: (1097,21) colormap__clamp(float, float, float)
        -> EXTERN: (1088,12) fmaxf(float, float)
        -> EXTERN: (1088,18) fminf(float, float)
      -> EXTERN: (1101,17) modff(float, float *)
      -> INLINE: (1106,10) colormap__lerp(float, float, float)
      -> INLINE: (1107,10) colormap__lerp(float, float, float)
      -> INLINE: (1108,10) colormap__lerp(float, float, float)
    -> EXTERN: colormap.h:(1115,10) rintf(float)
    -> EXTERN: colormap.h:(1116,10) rintf(float)
    -> EXTERN: colormap.h:(1117,10) rintf(float)
  -> EXTERN: (86,2) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (87,2) stbi_write_png(const char *, int, int, int, const void *, int)
    -> INLINE: stb_image_write.h:(1112,25) stbi_write_png_to_mem(unsigned char *, int, int, int, int, int *)
      -> EXTERN: (1024,17) ?1memcpy
      -> EXTERN: (1025,25) ?1memcpy
      -> EXTERN: (1037,29) malloc(size_t)
      -> EXTERN: (1038,34) malloc(size_t)
      -> EXTERN: (1038,75) free(void *)
      -> (1043,10) stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)
      -> (1047,13) stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)
      -> (1060,13) stbiw__encode_png_line(unsigned char *, int, int, int, int, int, int, signed char *)
      -> EXTERN: (1066,7) memmove(void *, const void *, size_t)
      -> EXTERN: (1068,4) free(void *)
      -> (1069,11) stbi_zlib_compress(unsigned char *, int, int *, int)
      -> EXTERN: (1070,4) free(void *)
      -> EXTERN: (1074,28) malloc(size_t)
      -> EXTERN: (1079,4) memmove(void *, const void *, size_t)
      -> INLINE: (1089,4) stbiw__wpcrc(unsigned char **, int)
        -> INLINE: (975,23) stbiw__crc32(unsigned char *, int)
      -> EXTERN: (1093,4) memmove(void *, const void *, size_t)
      -> EXTERN: (1095,4) free(void *)
      -> INLINE: (1096,4) stbiw__wpcrc(unsigned char **, int)
        -> INLINE: (975,23) stbiw__crc32(unsigned char *, int)
      -> INLINE: (1100,4) stbiw__wpcrc(unsigned char **, int)
        -> INLINE: (975,23) stbiw__crc32(unsigned char *, int)
      -> EXTERN: (1102,4) __assert_fail(const char *, const char *, unsigned int, const char *)
    -> EXTERN: stb_image_write.h:(1118,8) fopen(const char *__restrict__, const char *__restrict__)
    -> EXTERN: stb_image_write.h:(1120,14) free(void *)
    -> EXTERN: stb_image_write.h:(1121,4) fwrite(const void *__restrict__, size_t, size_t, FILE *__restrict__)
    -> EXTERN: stb_image_write.h:(1122,4) fclose(FILE *)
    -> EXTERN: stb_image_write.h:(1123,4) free(void *)
  -> EXTERN: (89,2) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at heat.c(80,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between slot (1100:5) and slot (1101:17)

   LOOP BEGIN at heat.c(81,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between slot (1100:5) and slot (1101:17)
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at stb_image_write.h(1039,4) inlined into heat.c(87,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stb_image_write.h(1046,10) inlined into heat.c(87,2)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stb_image_write.h(1051,13) inlined into heat.c(87,2)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=15
      LOOP END

      LOOP BEGIN at stb_image_write.h(1051,13) inlined into heat.c(87,2)
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 2.310 
         remark #15478: estimated potential speedup: 3.260 
         remark #15487: type converts: 1 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=93
      LOOP END

      LOOP BEGIN at stb_image_write.h(1051,13) inlined into heat.c(87,2)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stb_image_write.h(1080,4) inlined into heat.c(87,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.060 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(1081,4) inlined into heat.c(87,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into heat.c(87,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc (965:7) and crc (965:7)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into heat.c(87,2)
<Remainder>
LOOP END

LOOP BEGIN at stb_image_write.h(1092,4) inlined into heat.c(87,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into heat.c(87,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc (965:7) and crc (965:7)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into heat.c(87,2)
<Remainder>
LOOP END

LOOP BEGIN at stb_image_write.h(1098,4) inlined into heat.c(87,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(1099,4) inlined into heat.c(87,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at stb_image_write.h(964,4) inlined into heat.c(87,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc (965:7) and crc (965:7)
   remark #25436: completely unrolled by 4  
LOOP END

    Report from: Code generation optimizations [cg]

stb_image_write.h(1024,17):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
stb_image_write.h(1025,25):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
stb_image_write.h(1066,7):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1066,7):remark #34014: optimization advice for memmove: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1066,7):remark #34026: call to memmove implemented as a call to optimized library version
stb_image_write.h(1079,4):remark #34026: call to memmove implemented as a call to optimized library version
stb_image_write.h(1093,4):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1093,4):remark #34014: optimization advice for memmove: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
stb_image_write.h(1093,4):remark #34026: call to memmove implemented as a call to optimized library version
heat.c(75,43):remark #34051: REGISTER ALLOCATION : [write_png] heat.c:75

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm9]
        
    Routine temporaries
        Total         :     318
            Global    :      83
            Local     :     235
        Regenerable   :      57
        Spilled       :      23
        
    Routine stack
        Variables     :     136 bytes*
            Reads     :       5 [2.50e+05 ~ 1.6%]
            Writes    :       3 [3.00e+00 ~ 0.0%]
        Spills        :     136 bytes*
            Reads     :      26 [1.25e+06 ~ 7.9%]
            Writes    :      17 [5.01e+05 ~ 3.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: init(unsigned int, unsigned int, float *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (init(unsigned int, unsigned int, float *)) heat.c(28,80)

===========================================================================

Begin optimization report for: stbiw__write_dump_data(stbi__write_context *, int, unsigned char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (stbiw__write_dump_data(stbi__write_context *, int, unsigned char *)) [55] stb_image_write.h(581,1)
  -> EXTERN: (583,4) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> INDIRECT-: (584,4)  s_1947_V$d7.0.25->func_V$41
  -> INDIRECT-: (585,4)  s_1947_V$d7.0.25->func_V$41


    Report from: Code generation optimizations [cg]

stb_image_write.h(581,1):remark #34051: REGISTER ALLOCATION : [stbiw__write_dump_data] stb_image_write.h:581

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rdx rcx rsi rdi r12-r14]
        
    Routine temporaries
        Total         :      28
            Global    :       9
            Local     :      19
        Regenerable   :      10
        Spilled       :       3
        
    Routine stack
        Variables     :       1 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 2.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
