Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.5.281 Build 20190815

Compiler options: -O3 -std=c99 -Wall -qopenmp -qopt-report=3 -xhost -c -o demo.o

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] demo.c(367,1)
  -> EXTERN: (368,2) glutInit(int *, char **)
  -> EXTERN: (371,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (372,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (373,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (374,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (375,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (376,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (377,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (378,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (379,3) exit(int)
  -> EXTERN: (389,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE (MANUAL): (392,7) atoi(const char *)
    -> EXTERN: /usr/include/stdlib.h:(363,16) strtol(const char *__restrict__, char **__restrict__, int)
  -> INLINE (MANUAL): (393,8) atof(const char *)
    -> EXTERN: /usr/include/x86_64-linux-gnu/bits/stdlib-float.h:(27,10) strtod(const char *__restrict__, char **__restrict__)
  -> INLINE (MANUAL): (394,10) atof(const char *)
    -> EXTERN: /usr/include/x86_64-linux-gnu/bits/stdlib-float.h:(27,10) strtod(const char *__restrict__, char **__restrict__)
  -> INLINE (MANUAL): (395,10) atof(const char *)
    -> EXTERN: /usr/include/x86_64-linux-gnu/bits/stdlib-float.h:(27,10) strtod(const char *__restrict__, char **__restrict__)
  -> INLINE (MANUAL): (396,11) atof(const char *)
    -> EXTERN: /usr/include/x86_64-linux-gnu/bits/stdlib-float.h:(27,10) strtod(const char *__restrict__, char **__restrict__)
  -> INLINE (MANUAL): (397,12) atof(const char *)
    -> EXTERN: /usr/include/x86_64-linux-gnu/bits/stdlib-float.h:(27,10) strtod(const char *__restrict__, char **__restrict__)
  -> EXTERN: (400,2) printf(const char *__restrict__, ...)
  -> EXTERN: (401,2) printf(const char *__restrict__, ...)
  -> EXTERN: (402,2) printf(const char *__restrict__, ...)
  -> EXTERN: (403,2) printf(const char *__restrict__, ...)
  -> EXTERN: (404,2) printf(const char *__restrict__, ...)
  -> EXTERN: (405,2) printf(const char *__restrict__, ...)
  -> INLINE: (409,8) allocate_data(void)
    -> EXTERN: (74,17) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (75,17) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (76,22) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (77,22) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (78,20) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (79,24) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (82,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (409,27) exit(int)
  -> INLINE: (410,2) clear_data(void)
  -> INLINE: (414,2) open_glut_window(void)
    -> EXTERN: (337,2) glutInitDisplayMode(unsigned int)
    -> EXTERN: (339,2) glutInitWindowPosition(int, int)
    -> EXTERN: (340,2) glutInitWindowSize(int, int)
    -> EXTERN: (341,11) glutCreateWindow(const char *)
    -> EXTERN: (343,2) glClearColor(GLclampf, GLclampf, GLclampf, GLclampf)
    -> EXTERN: (344,2) glClear(GLbitfield)
    -> EXTERN: (345,2) glutSwapBuffers(void)
    -> EXTERN: (346,2) glClear(GLbitfield)
    -> EXTERN: (347,2) glutSwapBuffers(void)
    -> INLINE: (349,2) pre_display(void)
      -> EXTERN: (98,2) glViewport(GLint, GLint, GLsizei, GLsizei)
      -> EXTERN: (99,2) glMatrixMode(GLenum)
      -> EXTERN: (100,2) glLoadIdentity(void)
      -> EXTERN: (101,2) gluOrtho2D(GLdouble, GLdouble, GLdouble, GLdouble)
      -> EXTERN: (102,2) glClearColor(GLclampf, GLclampf, GLclampf, GLclampf)
      -> EXTERN: (103,2) glClear(GLbitfield)
    -> EXTERN: (351,2) glutKeyboardFunc(void (*)(unsigned char, int, int))
    -> EXTERN: (352,2) glutMouseFunc(void (*)(int, int, int, int))
    -> EXTERN: (353,2) glutMotionFunc(void (*)(int, int))
    -> EXTERN: (354,2) glutReshapeFunc(void (*)(int, int))
    -> EXTERN: (355,2) glutIdleFunc(void (*)(void))
    -> EXTERN: (356,2) glutDisplayFunc(void (*)(void))
  -> EXTERN: (416,2) glutMainLoop(void)
  -> EXTERN: (418,2) exit(int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at demo.c(65,2) inlined into demo.c(410,2)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 5.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at demo.c(65,2) inlined into demo.c(410,2)
<Remainder loop for vectorization, Distributed chunk1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 2.250 
   remark #15478: estimated potential speedup: 5.020 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at demo.c(65,2) inlined into demo.c(410,2)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at demo.c(65,2) inlined into demo.c(410,2)
<Peeled loop for vectorization, Distributed chunk2>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at demo.c(65,2) inlined into demo.c(410,2)
<Distributed chunk2>
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 2.250 
   remark #15478: estimated potential speedup: 5.020 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at demo.c(65,2) inlined into demo.c(410,2)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 2.250 
   remark #15478: estimated potential speedup: 5.020 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at demo.c(65,2) inlined into demo.c(410,2)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

    Report from: Code generation optimizations [cg]

demo.c(367,1):remark #34051: REGISTER ALLOCATION : [main] demo.c:367

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     266
            Global    :      83
            Local     :     183
        Regenerable   :     114
        Spilled       :       5
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       3 [1.00e+00 ~ 0.4%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: atoi(const char *)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (atoi(const char *))/usr/include/stdlib.h(362,1)

===========================================================================

Begin optimization report for: atof(const char *)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (atof(const char *))/usr/include/x86_64-linux-gnu/bits/stdlib-float.h(26,1)

===========================================================================

Begin optimization report for: free_data(void)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (free_data(void)) demo.c(52,1)

===========================================================================

Begin optimization report for: clear_data(void)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (clear_data(void)) demo.c(62,1)

===========================================================================

Begin optimization report for: allocate_data(void)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (allocate_data(void)) demo.c(71,1)

===========================================================================

Begin optimization report for: pre_display(void)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (pre_display(void)) demo.c(97,1)

===========================================================================

Begin optimization report for: post_display(void)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (post_display(void)) demo.c(107,1)

===========================================================================

Begin optimization report for: draw_velocity(void)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (draw_velocity(void)) demo.c(112,1)

===========================================================================

Begin optimization report for: draw_density(void)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (draw_density(void)) demo.c(137,1)

===========================================================================

Begin optimization report for: react(float *, float *, float *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (react(float *, float *, float *)) demo.c(172,1)

===========================================================================

Begin optimization report for: key_func(unsigned char, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (key_func(unsigned char, int, int)) [12] demo.c(229,1)
  -> INLINE: (234,4) clear_data(void)
  -> INLINE: (239,4) free_data(void)
    -> EXTERN: (53,11) _mm_free(void *)
    -> EXTERN: (54,11) _mm_free(void *)
    -> EXTERN: (55,16) _mm_free(void *)
    -> EXTERN: (56,16) _mm_free(void *)
    -> EXTERN: (57,14) _mm_free(void *)
    -> EXTERN: (58,19) _mm_free(void *)
  -> EXTERN: (240,4) exit(int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at demo.c(65,2) inlined into demo.c(234,4)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at demo.c(65,2) inlined into demo.c(234,4)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 4.900 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at demo.c(65,2) inlined into demo.c(234,4)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 4.900 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at demo.c(65,2) inlined into demo.c(234,4)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

demo.c(229,1):remark #34051: REGISTER ALLOCATION : [key_func] demo.c:229

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      68
            Global    :      45
            Local     :      23
        Regenerable   :       5
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [7.71e-01 ~ 0.6%]
            Writes    :       3 [7.71e-01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: mouse_func(int, int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (mouse_func(int, int, int, int)) [13] demo.c(251,1)


    Report from: Code generation optimizations [cg]

demo.c(251,1):remark #34051: REGISTER ALLOCATION : [mouse_func] demo.c:251

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rdx rcx rsi rdi]
        
    Routine temporaries
        Total         :      15
            Global    :       7
            Local     :       8
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: motion_func(int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (motion_func(int, int)) [14] demo.c(259,1)


    Report from: Code generation optimizations [cg]

demo.c(259,1):remark #34051: REGISTER ALLOCATION : [motion_func] demo.c:259

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rsi rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: reshape_func(int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (reshape_func(int, int)) [15] demo.c(265,1)
  -> EXTERN: (266,2) glutSetWindow(int)
  -> EXTERN: (267,2) glutReshapeWindow(int, int)


    Report from: Code generation optimizations [cg]

demo.c(265,1):remark #34051: REGISTER ALLOCATION : [reshape_func] demo.c:265

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rsi rdi r12-r13]
        
    Routine temporaries
        Total         :      14
            Global    :       8
            Local     :       6
        Regenerable   :       0
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: idle_func(void)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (idle_func(void)) [16] demo.c(274,1)
  -> EXTERN: (283,12) wtime(void)
  -> INLINE: (284,2) react(float *, float *, float *)
  -> EXTERN: (285,30) wtime(void)
  -> EXTERN: (287,12) wtime(void)
  -> EXTERN: (288,2) vel_step(unsigned int, float *, float *, float *, float *, float, float)
  -> EXTERN: (289,28) wtime(void)
  -> EXTERN: (291,12) wtime(void)
  -> EXTERN: (292,2) dens_step(unsigned int, float *, float *, float *, float *, float, float)
  -> EXTERN: (293,29) wtime(void)
  -> EXTERN: (297,10) wtime(void)
  -> EXTERN: (298,3) printf(const char *__restrict__, ...)
  -> EXTERN: (301,16) wtime(void)
  -> EXTERN: (305,3) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (311,2) glutSetWindowTitle(const char *)
  -> EXTERN: (313,2) glutSetWindow(int)
  -> EXTERN: (314,2) glutPostRedisplay(void)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at demo.c(179,2) inlined into demo.c(284,2)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at demo.c(179,2) inlined into demo.c(284,2)
   remark #25045: Fused Loops: ( 179 188 )

   remark #25427: Loop Statements Reordered
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 36 
   remark #15477: vector cost: 3.870 
   remark #15478: estimated potential speedup: 6.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at demo.c(188,2) inlined into demo.c(284,2)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at demo.c(179,2) inlined into demo.c(284,2)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

demo.c(274,1):remark #34051: REGISTER ALLOCATION : [idle_func] demo.c:274

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rsi rdi r8-r11 r13 zmm0-zmm11]
        
    Routine temporaries
        Total         :     218
            Global    :      47
            Local     :     171
        Regenerable   :      16
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [2.20e-01 ~ 0.1%]
            Writes    :       1 [1.00e+00 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: display_func(void)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (display_func(void)) [17] demo.c(319,1)
  -> INLINE: (320,2) pre_display(void)
    -> EXTERN: (98,2) glViewport(GLint, GLint, GLsizei, GLsizei)
    -> EXTERN: (99,2) glMatrixMode(GLenum)
    -> EXTERN: (100,2) glLoadIdentity(void)
    -> EXTERN: (101,2) gluOrtho2D(GLdouble, GLdouble, GLdouble, GLdouble)
    -> EXTERN: (102,2) glClearColor(GLclampf, GLclampf, GLclampf, GLclampf)
    -> EXTERN: (103,2) glClear(GLbitfield)
  -> INLINE: (322,15) draw_velocity(void)
    -> EXTERN: (118,2) glColor3f(GLfloat, GLfloat, GLfloat)
    -> EXTERN: (119,2) glLineWidth(GLfloat)
    -> EXTERN: (121,2) glBegin(GLenum)
    -> EXTERN: (128,5) glVertex2f(GLfloat, GLfloat)
    -> EXTERN: (129,5) glVertex2f(GLfloat, GLfloat)
    -> EXTERN: (133,2) glEnd(void)
  -> INLINE: (323,9) draw_density(void)
    -> EXTERN: (143,2) glBegin(GLenum)
    -> EXTERN: (155,5) glColor3f(GLfloat, GLfloat, GLfloat)
    -> EXTERN: (155,34) glVertex2f(GLfloat, GLfloat)
    -> EXTERN: (156,5) glColor3f(GLfloat, GLfloat, GLfloat)
    -> EXTERN: (156,34) glVertex2f(GLfloat, GLfloat)
    -> EXTERN: (157,5) glColor3f(GLfloat, GLfloat, GLfloat)
    -> EXTERN: (157,34) glVertex2f(GLfloat, GLfloat)
    -> EXTERN: (158,5) glColor3f(GLfloat, GLfloat, GLfloat)
    -> EXTERN: (158,34) glVertex2f(GLfloat, GLfloat)
    -> EXTERN: (162,2) glEnd(void)
  -> INLINE: (325,2) post_display(void)
    -> EXTERN: (108,2) glutSwapBuffers(void)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at demo.c(123,3) inlined into demo.c(322,15)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at demo.c(125,4) inlined into demo.c(322,15)
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at demo.c(145,3) inlined into demo.c(323,9)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at demo.c(147,4) inlined into demo.c(323,9)
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

demo.c(319,1):remark #34051: REGISTER ALLOCATION : [display_func] demo.c:319

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8 r12-r13 zmm0-zmm5]
        
    Routine temporaries
        Total         :     109
            Global    :      30
            Local     :      79
        Regenerable   :      26
        Spilled       :      13
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     104 bytes*
            Reads     :      26 [2.20e+02 ~ 19.6%]
            Writes    :      16 [8.44e+01 ~ 7.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: open_glut_window(void)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (open_glut_window(void)) demo.c(336,1)

===========================================================================
