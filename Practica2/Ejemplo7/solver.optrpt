Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.5.281 Build 20190815

Compiler options: -O3 -std=c99 -Wall -qopenmp -qopt-report=3 -xhost -c -o solver.o

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: add_source(unsigned int, float *, const float *, float)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (add_source(unsigned int, float *, const float *, float)) solver.c(11,1)

===========================================================================

Begin optimization report for: diffuse(unsigned int, boundary, float *, const float *, float, float)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (diffuse(unsigned int, boundary, float *, const float *, float, float)) solver.c(60,1)

===========================================================================

Begin optimization report for: lin_solve(unsigned int, boundary, float *, const float *, float, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (lin_solve(unsigned int, boundary, float *, const float *, float, float)) [3] solver.c(33,1)
  -> INLINE: (55,9) set_bnd(unsigned int, boundary, float *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at solver.c(34,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at solver.c(35,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at solver.c(38,9)
      remark #25445: Loop Interchange not done due to: Data Dependencies
      remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
      remark #25447: Dependence found between following statements:  [42 -> (Flow) 42]
      remark #25447: Dependence found between following statements:  [42 -> (Anti) 42]
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 5 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 45 
      remark #15477: vector cost: 5.750 
      remark #15478: estimated potential speedup: 7.160 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at solver.c(39,13)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at solver.c(38,9)
   <Remainder loop for vectorization>

      LOOP BEGIN at solver.c(39,13)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at solver.c(48,9)
      remark #25445: Loop Interchange not done due to: Data Dependencies
      remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
      remark #25447: Dependence found between following statements:  [52 -> (Flow) 52]
      remark #25447: Dependence found between following statements:  [52 -> (Anti) 52]
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 5 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 45 
      remark #15477: vector cost: 5.750 
      remark #15478: estimated potential speedup: 7.160 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at solver.c(49,13)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at solver.c(48,9)
   <Remainder loop for vectorization>

      LOOP BEGIN at solver.c(49,13)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at solver.c(20,5) inlined into solver.c(55,9)
   <Predicate Optimized v3>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x[(n+2)*i] (21:9) and x[i+(n+2)*(n+1)] (24:9)
   LOOP END

   LOOP BEGIN at solver.c(20,5) inlined into solver.c(55,9)
   <Predicate Optimized v3>
      remark #25422: Invariant Condition at line 23 hoisted out of this loop
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x[(n+2)*i] (21:9) and x[i+(n+2)*(n+1)] (24:9)
   LOOP END

   LOOP BEGIN at solver.c(20,5) inlined into solver.c(55,9)
   <Predicate Optimized v4>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x[(n+2)*i] (21:9) and x[i+(n+2)*(n+1)] (24:9)
   LOOP END
LOOP END

Fusion of IFs performed in lin_solve at line 21

Fusion of IFs performed in lin_solve at line 23

    Report from: Code generation optimizations [cg]

solver.c(33,1):remark #34051: REGISTER ALLOCATION : [lin_solve] solver.c:33

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     324
            Global    :      77
            Local     :     247
        Regenerable   :      56
        Spilled       :      28
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :       4 [0.00e+00 ~ 0.0%]
            Writes    :      11 [1.10e+01 ~ 0.1%]
        Spills        :     264 bytes*
            Reads     :      79 [3.49e+02 ~ 2.1%]
            Writes    :      65 [1.46e+02 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: advect(unsigned int, boundary, float *, const float *, const float *, const float *, float)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (advect(unsigned int, boundary, float *, const float *, const float *, const float *, float)) solver.c(66,1)

===========================================================================

Begin optimization report for: set_bnd(unsigned int, boundary, float *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (set_bnd(unsigned int, boundary, float *)) solver.c(19,1)

===========================================================================

Begin optimization report for: dens_step(unsigned int, float *, float *, float *, float *, float, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dens_step(unsigned int, float *, float *, float *, float *, float, float)) [6] solver.c(131,1)
  -> INLINE: (132,5) add_source(unsigned int, float *, const float *, float)
  -> INLINE: (134,5) diffuse(unsigned int, boundary, float *, const float *, float, float)
    -> INLINE: (62,5) lin_solve(unsigned int, boundary, float *, const float *, float, float)
      -> INLINE: (55,9) set_bnd(unsigned int, boundary, float *)
  -> INLINE: (136,5) advect(unsigned int, boundary, float *, const float *, const float *, const float *, float)
    -> INLINE: (99,5) set_bnd(unsigned int, boundary, float *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at solver.c(34,5) inlined into solver.c(134,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at solver.c(13,5) inlined into solver.c(132,5)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at solver.c(13,5) inlined into solver.c(132,5)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 7.100 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at solver.c(13,5) inlined into solver.c(132,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at solver.c(13,5) inlined into solver.c(132,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at solver.c(13,5) inlined into solver.c(132,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at solver.c(73,5) inlined into solver.c(136,5)
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 120 
   remark #15477: vector cost: 38.750 
   remark #15478: estimated potential speedup: 3.000 
   remark #15487: type converts: 5 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at solver.c(74,9) inlined into solver.c(136,5)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at solver.c(73,5) inlined into solver.c(136,5)
<Remainder loop for vectorization>

   LOOP BEGIN at solver.c(74,9) inlined into solver.c(136,5)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at solver.c(20,5) inlined into solver.c(136,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between x[(n+2)*i] (21:9) and x[i+(n+2)*(n+1)] (24:9)
LOOP END

LOOP BEGIN at solver.c(35,5) inlined into solver.c(134,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at solver.c(38,9) inlined into solver.c(134,5)
      remark #25445: Loop Interchange not done due to: Data Dependencies
      remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
      remark #25447: Dependence found between following statements:  [42 -> (Flow) 42]
      remark #25447: Dependence found between following statements:  [42 -> (Anti) 42]
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 5 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 45 
      remark #15477: vector cost: 5.750 
      remark #15478: estimated potential speedup: 7.160 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at solver.c(39,13) inlined into solver.c(134,5)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at solver.c(38,9) inlined into solver.c(134,5)
   <Remainder loop for vectorization>

      LOOP BEGIN at solver.c(39,13) inlined into solver.c(134,5)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at solver.c(48,9) inlined into solver.c(134,5)
      remark #25445: Loop Interchange not done due to: Data Dependencies
      remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
      remark #25447: Dependence found between following statements:  [52 -> (Flow) 52]
      remark #25447: Dependence found between following statements:  [52 -> (Anti) 52]
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 5 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 45 
      remark #15477: vector cost: 5.750 
      remark #15478: estimated potential speedup: 7.160 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at solver.c(49,13) inlined into solver.c(134,5)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at solver.c(48,9) inlined into solver.c(134,5)
   <Remainder loop for vectorization>

      LOOP BEGIN at solver.c(49,13) inlined into solver.c(134,5)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at solver.c(20,5) inlined into solver.c(134,5)
   <Predicate Optimized v3>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x (21:9) and x (24:9)
   LOOP END

   LOOP BEGIN at solver.c(20,5) inlined into solver.c(134,5)
   <Predicate Optimized v3>
      remark #25422: Invariant Condition at line 23 hoisted out of this loop
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x (21:9) and x (24:9)
   LOOP END

   LOOP BEGIN at solver.c(20,5) inlined into solver.c(134,5)
   <Predicate Optimized v4>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x (21:9) and x (24:9)
   LOOP END
LOOP END

Fusion of IFs performed in dens_step at line 21

Fusion of IFs performed in dens_step at line 23

    Report from: Code generation optimizations [cg]

solver.c(131,1):remark #34051: REGISTER ALLOCATION : [dens_step] solver.c:131

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     547
            Global    :     139
            Local     :     408
        Regenerable   :      72
        Spilled       :      38
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :       4 [0.00e+00 ~ 0.0%]
            Writes    :      11 [1.10e+01 ~ 0.1%]
        Spills        :     368 bytes*
            Reads     :      97 [3.65e+02 ~ 1.8%]
            Writes    :      75 [1.57e+02 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: vel_step(unsigned int, float *, float *, float *, float *, float, float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (vel_step(unsigned int, float *, float *, float *, float *, float, float)) [7] solver.c(140,1)
  -> INLINE: (141,5) add_source(unsigned int, float *, const float *, float)
  -> INLINE: (142,5) add_source(unsigned int, float *, const float *, float)
  -> INLINE: (144,5) diffuse(unsigned int, boundary, float *, const float *, float, float)
    -> INLINE: (62,5) lin_solve(unsigned int, boundary, float *, const float *, float, float)
      -> INLINE: (55,9) set_bnd(unsigned int, boundary, float *)
  -> INLINE: (146,5) diffuse(unsigned int, boundary, float *, const float *, float, float)
    -> INLINE: (62,5) lin_solve(unsigned int, boundary, float *, const float *, float, float)
      -> INLINE: (55,9) set_bnd(unsigned int, boundary, float *)
  -> (147,5) project(unsigned int, float *, float *, float *, float *)
  -> INLINE: (150,5) advect(unsigned int, boundary, float *, const float *, const float *, const float *, float)
    -> INLINE: (99,5) set_bnd(unsigned int, boundary, float *)
  -> INLINE: (151,5) advect(unsigned int, boundary, float *, const float *, const float *, const float *, float)
    -> INLINE: (99,5) set_bnd(unsigned int, boundary, float *)
  -> (152,5) project(unsigned int, float *, float *, float *, float *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at solver.c(34,5) inlined into solver.c(144,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at solver.c(34,5) inlined into solver.c(146,5)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at solver.c(13,5) inlined into solver.c(141,5)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at solver.c(13,5) inlined into solver.c(141,5)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 7.100 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at solver.c(13,5) inlined into solver.c(141,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at solver.c(13,5) inlined into solver.c(141,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at solver.c(13,5) inlined into solver.c(141,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at solver.c(13,5) inlined into solver.c(142,5)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at solver.c(13,5) inlined into solver.c(142,5)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 7.100 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at solver.c(13,5) inlined into solver.c(142,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at solver.c(13,5) inlined into solver.c(142,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at solver.c(13,5) inlined into solver.c(142,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at solver.c(73,5) inlined into solver.c(150,5)
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 120 
   remark #15477: vector cost: 38.750 
   remark #15478: estimated potential speedup: 3.000 
   remark #15487: type converts: 5 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at solver.c(74,9) inlined into solver.c(150,5)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at solver.c(73,5) inlined into solver.c(150,5)
<Remainder loop for vectorization>

   LOOP BEGIN at solver.c(74,9) inlined into solver.c(150,5)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at solver.c(20,5) inlined into solver.c(150,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between u[(n+2)*i] (21:9) and u[i+(n+2)*(n+1)] (24:9)
LOOP END

LOOP BEGIN at solver.c(73,5) inlined into solver.c(151,5)
   remark #25445: Loop Interchange not done due to: Data Dependencies
   remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
   remark #25447: Dependence found between following statements:  [75 -> (Anti) 95]
   remark #25447: Dependence found between following statements:  [76 -> (Anti) 95]
   remark #25447: Dependence found between following statements:  [95 -> (Flow) 95]
   remark #25447: Dependence found between following statements:  [95 -> (Anti) 95]
   remark #25447: Dependence found between following statements:  [95 -> (Flow) 76]
   remark #25447: Dependence found between following statements:  [95 -> (Flow) 75]
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 120 
   remark #15477: vector cost: 38.750 
   remark #15478: estimated potential speedup: 3.000 
   remark #15487: type converts: 5 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at solver.c(74,9) inlined into solver.c(151,5)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at solver.c(73,5) inlined into solver.c(151,5)
<Remainder loop for vectorization>

   LOOP BEGIN at solver.c(74,9) inlined into solver.c(151,5)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at solver.c(20,5) inlined into solver.c(151,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between v[(n+2)*i] (21:9) and v[i+(n+2)*(n+1)] (24:9)
LOOP END

LOOP BEGIN at solver.c(35,5) inlined into solver.c(144,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at solver.c(38,9) inlined into solver.c(144,5)
      remark #25445: Loop Interchange not done due to: Data Dependencies
      remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
      remark #25447: Dependence found between following statements:  [42 -> (Flow) 42]
      remark #25447: Dependence found between following statements:  [42 -> (Anti) 42]
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 5 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 45 
      remark #15477: vector cost: 5.750 
      remark #15478: estimated potential speedup: 7.160 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at solver.c(39,13) inlined into solver.c(144,5)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at solver.c(38,9) inlined into solver.c(144,5)
   <Remainder loop for vectorization>

      LOOP BEGIN at solver.c(39,13) inlined into solver.c(144,5)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at solver.c(48,9) inlined into solver.c(144,5)
      remark #25445: Loop Interchange not done due to: Data Dependencies
      remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
      remark #25447: Dependence found between following statements:  [52 -> (Flow) 52]
      remark #25447: Dependence found between following statements:  [52 -> (Anti) 52]
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 5 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 45 
      remark #15477: vector cost: 5.750 
      remark #15478: estimated potential speedup: 7.160 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at solver.c(49,13) inlined into solver.c(144,5)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at solver.c(48,9) inlined into solver.c(144,5)
   <Remainder loop for vectorization>

      LOOP BEGIN at solver.c(49,13) inlined into solver.c(144,5)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at solver.c(20,5) inlined into solver.c(144,5)
   <Predicate Optimized v3>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x (21:9) and x (24:9)
   LOOP END

   LOOP BEGIN at solver.c(20,5) inlined into solver.c(144,5)
   <Predicate Optimized v3>
      remark #25422: Invariant Condition at line 23 hoisted out of this loop
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x (21:9) and x (24:9)
   LOOP END

   LOOP BEGIN at solver.c(20,5) inlined into solver.c(144,5)
   <Predicate Optimized v4>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x (21:9) and x (24:9)
   LOOP END
LOOP END

LOOP BEGIN at solver.c(35,5) inlined into solver.c(146,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at solver.c(38,9) inlined into solver.c(146,5)
      remark #25445: Loop Interchange not done due to: Data Dependencies
      remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
      remark #25447: Dependence found between following statements:  [42 -> (Flow) 42]
      remark #25447: Dependence found between following statements:  [42 -> (Anti) 42]
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 5 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 45 
      remark #15477: vector cost: 5.750 
      remark #15478: estimated potential speedup: 7.160 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at solver.c(39,13) inlined into solver.c(146,5)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at solver.c(38,9) inlined into solver.c(146,5)
   <Remainder loop for vectorization>

      LOOP BEGIN at solver.c(39,13) inlined into solver.c(146,5)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at solver.c(48,9) inlined into solver.c(146,5)
      remark #25445: Loop Interchange not done due to: Data Dependencies
      remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
      remark #25447: Dependence found between following statements:  [52 -> (Flow) 52]
      remark #25447: Dependence found between following statements:  [52 -> (Anti) 52]
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 5 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 45 
      remark #15477: vector cost: 5.750 
      remark #15478: estimated potential speedup: 7.160 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at solver.c(49,13) inlined into solver.c(146,5)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at solver.c(48,9) inlined into solver.c(146,5)
   <Remainder loop for vectorization>

      LOOP BEGIN at solver.c(49,13) inlined into solver.c(146,5)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END

   LOOP BEGIN at solver.c(20,5) inlined into solver.c(146,5)
   <Predicate Optimized v3>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x (21:9) and x (24:9)
   LOOP END

   LOOP BEGIN at solver.c(20,5) inlined into solver.c(146,5)
   <Predicate Optimized v3>
      remark #25422: Invariant Condition at line 23 hoisted out of this loop
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x (21:9) and x (24:9)
   LOOP END

   LOOP BEGIN at solver.c(20,5) inlined into solver.c(146,5)
   <Predicate Optimized v4>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between x (21:9) and x (24:9)
   LOOP END
LOOP END

Fusion of IFs performed in vel_step at line 21

Fusion of IFs performed in vel_step at line 23

Fusion of IFs performed in vel_step at line 21

Fusion of IFs performed in vel_step at line 23

    Report from: Code generation optimizations [cg]

solver.c(140,1):remark #34051: REGISTER ALLOCATION : [vel_step] solver.c:140

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1048
            Global    :     270
            Local     :     778
        Regenerable   :     141
        Spilled       :      85
        
    Routine stack
        Variables     :     108 bytes*
            Reads     :       8 [0.00e+00 ~ 0.0%]
            Writes    :      21 [2.10e+01 ~ 0.1%]
        Spills        :     744 bytes*
            Reads     :     226 [7.55e+02 ~ 1.9%]
            Writes    :     150 [2.62e+02 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: project(unsigned int, float *, float *, float *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (project(unsigned int, float *, float *, float *, float *)) [8] solver.c(103,1)
  -> INLINE: (113,5) set_bnd(unsigned int, boundary, float *)
  -> INLINE: (114,5) set_bnd(unsigned int, boundary, float *)
  -> (116,5) lin_solve(unsigned int, boundary, float *, const float *, float, float)
  -> INLINE: (126,5) set_bnd(unsigned int, boundary, float *)
  -> INLINE: (127,5) set_bnd(unsigned int, boundary, float *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at solver.c(106,5)
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 4 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 46 
   remark #15477: vector cost: 5.870 
   remark #15478: estimated potential speedup: 7.170 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at solver.c(107,9)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at solver.c(106,5)
<Remainder loop for vectorization>

   LOOP BEGIN at solver.c(107,9)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at solver.c(20,5) inlined into solver.c(113,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between div[(n+2)*i] (21:9) and div[i+(n+2)*(n+1)] (24:9)
LOOP END

LOOP BEGIN at solver.c(20,5) inlined into solver.c(114,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between p[(n+2)*i] (21:9) and p[i+(n+2)*(n+1)] (24:9)
LOOP END

LOOP BEGIN at solver.c(120,5)
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 6 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 2.370 
   remark #15478: estimated potential speedup: 11.210 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at solver.c(121,9)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at solver.c(120,5)
<Remainder loop for vectorization>

   LOOP BEGIN at solver.c(121,9)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at solver.c(20,5) inlined into solver.c(126,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between u[(n+2)*i] (21:9) and u[i+(n+2)*(n+1)] (24:9)
LOOP END

LOOP BEGIN at solver.c(20,5) inlined into solver.c(127,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between v[(n+2)*i] (21:9) and v[i+(n+2)*(n+1)] (24:9)
LOOP END

    Report from: Code generation optimizations [cg]

solver.c(103,1):remark #34051: REGISTER ALLOCATION : [project] solver.c:103

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm14]
        
    Routine temporaries
        Total         :     297
            Global    :      87
            Local     :     210
        Regenerable   :      11
        Spilled       :      35
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     224 bytes*
            Reads     :      94 [1.23e+02 ~ 3.6%]
            Writes    :      68 [7.76e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
